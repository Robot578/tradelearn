// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let chart;
let candleSeries;
let volumeSeries;
let smaSeries;
let emaSeries;
let rsiSeries;
let macdSeries;
let bollingerSeries;
let currentData = [];
let balance = 100.00;
let portfolio = {
    'BTC': 0,
    'ETH': 0, 
    'SOL': 0,
    'ADA': 0,
    'DOT': 0
};
let tradeHistory = [];
let activeOrders = [];
let currentAsset = 'BTCUSDT';
let currentTimeframe = '1m';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
let leverage = 1;
let tradingFees = 0.1;
let spread = 0.01;
let userLevel = 1;
let userXP = 0;

let indicators = {
    sma: true,
    ema: false,
    rsi: false,
    volume: true,
    macd: false,
    bollinger: false,
    stochastic: false
};

let advancedStats = {
    totalProfit: 0,
    maxDrawdown: 0,
    averageWin: 0,
    averageLoss: 0,
    profitFactor: 0,
    sharpeRatio: 0,
    expectancy: 0,
    totalTrades: 0,
    winningTrades: 0,
    losingTrades: 0
};

let achievements = {
    firstTrade: { unlocked: false, reward: 5, xp: 50 },
    profit10: { unlocked: false, reward: 10, xp: 100 },
    riskManager: { unlocked: false, reward: 15, xp: 150 },
    streak3: { unlocked: false, reward: 8, xp: 80 },
    volumeTrader: { unlocked: false, reward: 20, xp: 200 },
    analyst: { unlocked: false, reward: 12, xp: 120 }
};

let dailyQuests = {
    trade3: { completed: false, progress: 0, target: 3, reward: 5, xp: 50 },
    useStopLoss: { completed: false, progress: 0, target: 5, reward: 8, xp: 80 },
    profit5: { completed: false, progress: 0, target: 5, reward: 10, xp: 100 }
};

let wsConnection = null;
let realTimeData = null;

// –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—á–∏—Ç–µ–ª—è
const teacherKnowledge = {
    questions: {
        '—á—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–µ–π–¥–∏–Ω–≥': '–¢—Ä–µ–π–¥–∏–Ω–≥ - —ç—Ç–æ —Ç–æ—Ä–≥–æ–≤–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ —Å —Ü–µ–ª—å—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Ö —Ü–µ–Ω—ã.',
        '–∫–∞–∫ –Ω–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å': '–ù–∞—á–Ω–∏—Ç–µ —Å –∏–∑—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤, –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–µ–º–æ-—Å—á–µ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ —Ç–æ—Ä–≥—É–π—Ç–µ –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏–µ —Å—É–º–º—ã.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–æ–ø –ª–æ—Å—Å': '–°—Ç–æ–ø-–ª–æ—Å—Å - —ç—Ç–æ –æ—Ä–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —É–±—ã—Ç–∫–∞.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ —Ç–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç': '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç - —ç—Ç–æ –æ—Ä–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–±—ã–ª–∏.',
        '–∫–∞–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: –∏–∑—É—á–∞–π—Ç–µ —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ –±—ã—á–∏–π —Ä—ã–Ω–æ–∫': '–ë—ã—á–∏–π —Ä—ã–Ω–æ–∫ - —ç—Ç–æ –ø–µ—Ä–∏–æ–¥ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω, –∫–æ–≥–¥–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ –º–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫': '–ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ - —ç—Ç–æ –ø–µ—Ä–∏–æ–¥ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω, –∫–æ–≥–¥–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω–æ.',
        '–∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∏—Å–∫–∞–º–∏': '–†–∏—Å–∫—É–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 1-2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è': '–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è - —ç—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤.',
        '–∫–∞–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å': '–ù–∞—á–Ω–∏—Ç–µ —Å SMA, EMA, RSI –∏ MACD. –ö–∞–∂–¥—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã.'
    },

    lessons: {
        'basics': {
            title: 'üìñ –û—Å–Ω–æ–≤—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞',
            content: `–¢—Ä–µ–π–¥–∏–Ω–≥ - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ buying low and selling high (–ø–æ–∫—É–ø–∞—Ç—å –¥–µ—à–µ–≤–æ, –ø—Ä–æ–¥–∞–≤–∞—Ç—å –¥–æ—Ä–æ–≥–æ). 
            
            –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è:
            ‚Ä¢ Long (–ª–æ–Ω–≥) - –ø–æ–∫—É–ø–∫–∞ –∞–∫—Ç–∏–≤–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã
            ‚Ä¢ Short (—à–æ—Ä—Ç) - –ø—Ä–æ–¥–∞–∂–∞ –∞–∫—Ç–∏–≤–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã
            ‚Ä¢ Spread (—Å–ø—Ä–µ–¥) - —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏
            ‚Ä¢ Volume (–æ–±—ä–µ–º) - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
            
            –í–∞–∂–Ω–æ: –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–∏—Å–∫—É–π—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ—Ç–µ—Ä—è—Ç—å!`
        },
        'candles': {
            title: 'üïØÔ∏è –°–≤–µ—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑',
            content: `–Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ü–µ–Ω—É –æ—Ç–∫—Ä—ã—Ç–∏—è, –∑–∞–∫—Ä—ã—Ç–∏—è, –º–∞–∫—Å–∏–º—É–º –∏ –º–∏–Ω–∏–º—É–º –∑–∞ –ø–µ—Ä–∏–æ–¥.
            
            –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:
            ‚Ä¢ –ë—ã—á—å—è —Å–≤–µ—á–∞ - –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—ã—à–µ –æ—Ç–∫—Ä—ã—Ç–∏—è (–æ–±—ã—á–Ω–æ –∑–µ–ª–µ–Ω–∞—è)
            ‚Ä¢ –ú–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞ - –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–∏–∂–µ –æ—Ç–∫—Ä—ã—Ç–∏—è (–æ–±—ã—á–Ω–æ –∫—Ä–∞—Å–Ω–∞—è)
            ‚Ä¢ –î–æ–¥–∂–∏ - –º–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ, –Ω–µ—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞
            ‚Ä¢ –ú–æ–ª–æ—Ç - –±—ã—á–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            ‚Ä¢ –ü–æ–≤–µ—à–µ–Ω–Ω—ã–π - –º–µ–¥–≤–µ–∂–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–µ—á–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç—Ä–µ–Ω–¥–∞!`
        },
        'indicators': {
            title: 'üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã',
            content: `–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–º–æ–≥–∞—é—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞.
            
            –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:
            ‚Ä¢ SMA (Simple Moving Average) - –ø—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
            ‚Ä¢ EMA (Exponential Moving Average) - —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
            ‚Ä¢ RSI (Relative Strength Index) - –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã
            ‚Ä¢ MACD (Moving Average Convergence Divergence) - —Å—Ö–æ–∂–¥–µ–Ω–∏–µ/—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
            
            –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - —ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –ø—É—Ç–∞–Ω–∏—Ü—É!`
        },
        'risk': {
            title: 'üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏',
            content: `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ - –∫–ª—é—á –∫ —É—Å–ø–µ—à–Ω–æ–º—É —Ç—Ä–µ–π–¥–∏–Ω–≥—É!
            
            –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
            ‚Ä¢ –†–∏—Å–∫—É–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 1-2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
            ‚Ä¢ –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å
            ‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1:2
            ‚Ä¢ –í–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª
            ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —ç–º–æ—Ü–∏–∏ - –∂–∞–¥–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–∞—Ö –≥–ª–∞–≤–Ω—ã–µ –≤—Ä–∞–≥–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞
            
            –ü–æ–º–Ω–∏—Ç–µ: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª –≤–∞–∂–Ω–µ–µ, —á–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å!`
        },
        'strategies': {
            title: 'üéØ –¢–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏',
            content: `–†–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏:
            
            ‚Ä¢ –°–∫–∞–ª—å–ø–∏–Ω–≥ - –º–Ω–æ–∂–µ—Å—Ç–≤–æ –±—ã—Å—Ç—Ä—ã—Ö —Å–¥–µ–ª–æ–∫ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –ø—Ä–∏–±—ã–ª—å—é
            ‚Ä¢ –î–µ–π—Ç—Ä–µ–π–¥–∏–Ω–≥ - —Å–¥–µ–ª–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è
            ‚Ä¢ –°–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥ - —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
            ‚Ä¢ –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
            
            –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞—à–µ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é!`
        }
    },

    dictionary: {
        '–õ–æ–Ω–≥ (Long)': '–ü–æ–∑–∏—Ü–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É, –ø—Ä–∏–±—ã–ª—å –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã',
        '–®–æ—Ä—Ç (Short)': '–ü–æ–∑–∏—Ü–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É, –ø—Ä–∏–±—ã–ª—å –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã',
        '–°–ø—Ä–µ–¥ (Spread)': '–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏',
        '–õ–∏–∫–≤–∏–¥–∞—Ü–∏—è (Liquidation)': '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤',
        '–ú–∞—Ä–∂–∞ (Margin)': '–ó–∞–ª–æ–≥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–ª–µ—á–æ–º',
        '–ü–ª–µ—á–æ (Leverage)': '–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ–±—ä–µ–º–∞ –ø–æ–∑–∏—Ü–∏–∏',
        '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (Volatility)': '–°—Ç–µ–ø–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞',
        '–¢—Ä–µ–Ω–¥ (Trend)': '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã',
        '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è (Correction)': '–í—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞',
        '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ (Support)': '–£—Ä–æ–≤–µ–Ω—å, –≥–¥–µ —Ü–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π',
        '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (Resistance)': '–£—Ä–æ–≤–µ–Ω—å, –≥–¥–µ —Ü–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–¥–∞–≤—Ü–æ–≤',
        '–ë—ã–∫–∏ (Bulls)': '–¢—Ä–µ–π–¥–µ—Ä—ã, –æ–∂–∏–¥–∞—é—â–∏–µ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã',
        '–ú–µ–¥–≤–µ–¥–∏ (Bears)': '–¢—Ä–µ–π–¥–µ—Ä—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã',
        '–§–ª—ç—Ç (Flat)': '–ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –±–µ–∑ —è–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞',
        '–ì—ç–ø (Gap)': '–†–∞–∑—Ä—ã–≤ –≤ —Ü–µ–Ω–µ –º–µ–∂–¥—É —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏',
        '–°–ª–∏–ø–ø–∏–¥–∂ (Slippage)': '–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ–∂–∏–¥–∞–µ–º–æ–π –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω–æ–π –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è',
        '–ê—Ä–±–∏—Ç—Ä–∞–∂ (Arbitrage)': '–ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∞–∫—Ç–∏–≤–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä—ã–Ω–∫–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ –æ—Ç —Ä–∞–∑–Ω–∏—Ü—ã —Ü–µ–Ω',
        '–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (Diversification)': '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏',
        '–•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ (Hedging)': '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π',
        '–ê–ª–ª–∏–≥–∞—Ç–æ—Ä (Alligator)': '–¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ—Ö —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö'
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function initializeApp() {
    initializeChart();
    setupEventListeners();
    loadInitialData();
    updateUI();
    setupWebSocket();
    initializeTeacher();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
function initializeChart() {
    const chartContainer = document.getElementById('candleChart');
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π
    chart = LightweightCharts.createChart(chartContainer, {
        width: chartContainer.clientWidth,
        height: chartContainer.clientHeight,
        layout: {
            background: { color: '#121212' },
            textColor: '#D9D9D9',
        },
        grid: {
            vertLines: { color: '#2B2B2B' },
            horzLines: { color: '#2B2B2B' },
        },
        crosshair: {
            mode: LightweightCharts.CrosshairMode.Normal,
        },
        rightPriceScale: {
            borderColor: '#2B2B2B',
        },
        timeScale: {
            borderColor: '#2B2B2B',
            timeVisible: true,
            secondsVisible: false,
        },
        handleScroll: {
            mouseWheel: true,
            pressedMouseMove: true,
            horzTouchDrag: true,
            vertTouchDrag: true,
        },
        handleScale: {
            axisPressedMouseMove: true,
            mouseWheel: true,
            pinch: true,
        },
    });

    // –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ä–∏—è —Å–≤–µ—á–µ–π
    candleSeries = chart.addCandlestickSeries({
        upColor: '#26a69a',
        downColor: '#ef5350',
        borderVisible: false,
        wickUpColor: '#26a69a',
        wickDownColor: '#ef5350',
    });

    // –°–µ—Ä–∏—è –¥–ª—è –æ–±—ä–µ–º–∞
    volumeSeries = chart.addHistogramSeries({
        color: '#26a69a',
        priceFormat: {
            type: 'volume',
        },
        priceScaleId: 'volume',
        scaleMargins: {
            top: 0.8,
            bottom: 0,
        },
    });

    // –°–µ—Ä–∏–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    smaSeries = chart.addLineSeries({
        color: '#2962FF',
        lineWidth: 2,
        title: 'SMA 20',
        priceScaleId: 'left',
    });

    emaSeries = chart.addLineSeries({
        color: '#FF6D00',
        lineWidth: 2,
        title: 'EMA 20',
        priceScaleId: 'left',
    });

    rsiSeries = chart.addLineSeries({
        color: '#9C27B0',
        lineWidth: 2,
        title: 'RSI',
        priceScaleId: 'rsi',
    });

    macdSeries = chart.addLineSeries({
        color: '#FF4081',
        lineWidth: 2,
        title: 'MACD',
        priceScaleId: 'macd',
    });

    bollingerSeries = chart.addLineSeries({
        color: '#4CAF50',
        lineWidth: 1,
        title: 'Bollinger Bands',
        priceScaleId: 'left',
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∫–∞–ª –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    chart.priceScale('volume').applyOptions({
        scaleMargins: {
            top: 0.8,
            bottom: 0,
        },
    });

    chart.priceScale('rsi').applyOptions({
        scaleMargins: {
            top: 0.1,
            bottom: 0.1,
        },
    });

    chart.priceScale('macd').applyOptions({
        scaleMargins: {
            top: 0.1,
            bottom: 0.1,
        },
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∞–π–¥–±–∞—Ä–∞
    document.getElementById('sidebarToggle').addEventListener('click', toggleSidebar);
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const section = this.getAttribute('data-section');
            showSection(section);
        });
    });

    // –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞
    document.getElementById('assetSelect').addEventListener('change', function() {
        currentAsset = this.value;
        loadChartData();
    });

    // –¢–∞–π–º—Ñ—Ä–µ–π–º—ã
    document.querySelectorAll('.timeframe-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.timeframe-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            currentTimeframe = this.getAttribute('data-timeframe');
            loadChartData();
        });
    });

    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    document.querySelectorAll('.indicator-checkbox input').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const indicator = this.id.replace('show', '').toLowerCase();
            indicators[indicator] = this.checked;
            updateIndicators();
        });
    });

    // –¢–æ—Ä–≥–æ–≤–ª—è
    document.getElementById('buyBtn').addEventListener('click', () => executeTrade('buy'));
    document.getElementById('sellBtn').addEventListener('click', () => executeTrade('sell'));
    document.getElementById('leverageSlider').addEventListener('input', function() {
        leverage = parseInt(this.value);
        document.getElementById('leverageValue').textContent = `${leverage}x`;
        updateTradingInfo();
    });

    // –†–∏—Å–∫ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
    document.getElementById('calculateRisk').addEventListener('click', calculateRiskManagement);

    // –£—á–∏—Ç–µ–ª—å
    document.getElementById('askQuestion').addEventListener('click', askTeacherQuestion);
    document.querySelectorAll('.teacher-action-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const action = this.getAttribute('data-action');
            handleTeacherAction(action);
        });
    });

    // –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤
    document.querySelectorAll('.dictionary-term').forEach(term => {
        term.addEventListener('click', function() {
            const termName = this.querySelector('.term-name').textContent;
            showTermDefinition(termName);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', function() {
        if (chart) {
            const chartContainer = document.getElementById('candleChart');
            chart.applyOptions({
                width: chartContainer.clientWidth,
                height: chartContainer.clientHeight
            });
        }
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadInitialData() {
    showLoading();
    await loadChartData();
    hideLoading();
    updateUI();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏
async function loadChartData() {
    try {
        showLoading();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
        const proxyUrl = 'https://cors-anywhere.herokuapp.com/';
        const binanceUrl = `https://api.binance.com/api/v3/klines?symbol=${currentAsset}&interval=${currentTimeframe}&limit=100`;
        
        const response = await fetch(proxyUrl + binanceUrl, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        const chartData = data.map(kline => ({
            time: kline[0] / 1000, // Convert to seconds
            open: parseFloat(kline[1]),
            high: parseFloat(kline[2]),
            low: parseFloat(kline[3]),
            close: parseFloat(kline[4]),
            volume: parseFloat(kline[5])
        }));

        currentData = chartData;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        candleSeries.setData(chartData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        updateIndicators();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        if (chartData.length > 0) {
            const latestPrice = chartData[chartData.length - 1].close;
            updateCurrentPrice(latestPrice);
        }
        
    } catch (error) {
        console.error('Error loading chart data:', error);
        
        // Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        generateTestData();
    } finally {
        hideLoading();
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
function generateTestData() {
    const testData = [];
    let basePrice = 50000;
    let currentTime = Math.floor(Date.now() / 1000) - 100 * 60; // 100 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    
    for (let i = 0; i < 100; i++) {
        const volatility = 0.02; // 2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        const changePercent = 2 * volatility * Math.random() - volatility;
        const changeAmount = basePrice * changePercent;
        const open = basePrice;
        const close = basePrice + changeAmount;
        const high = Math.max(open, close) + Math.random() * basePrice * 0.01;
        const low = Math.min(open, close) - Math.random() * basePrice * 0.01;
        const volume = 100 + Math.random() * 900;
        
        testData.push({
            time: currentTime + i * 60,
            open: open,
            high: high,
            low: low,
            close: close,
            volume: volume
        });
        
        basePrice = close;
    }
    
    currentData = testData;
    candleSeries.setData(testData);
    updateIndicators();
    
    if (testData.length > 0) {
        updateCurrentPrice(testData[testData.length - 1].close);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
function updateIndicators() {
    if (currentData.length === 0) return;

    // –û–±—ä–µ–º
    if (indicators.volume) {
        const volumeData = currentData.map(d => ({
            time: d.time,
            value: d.volume,
            color: d.close >= d.open ? 'rgba(38, 166, 154, 0.5)' : 'rgba(239, 83, 80, 0.5)'
        }));
        volumeSeries.setData(volumeData);
    } else {
        volumeSeries.setData([]);
    }

    // SMA (20 –ø–µ—Ä–∏–æ–¥–æ–≤)
    if (indicators.sma) {
        const smaData = calculateSMA(currentData, 20);
        smaSeries.setData(smaData);
    } else {
        smaSeries.setData([]);
    }

    // EMA (20 –ø–µ—Ä–∏–æ–¥–æ–≤)
    if (indicators.ema) {
        const emaData = calculateEMA(currentData, 20);
        emaSeries.setData(emaData);
    } else {
        emaSeries.setData([]);
    }

    // RSI (14 –ø–µ—Ä–∏–æ–¥–æ–≤)
    if (indicators.rsi) {
        const rsiData = calculateRSI(currentData, 14);
        rsiSeries.setData(rsiData);
    } else {
        rsiSeries.setData([]);
    }

    // MACD
    if (indicators.macd) {
        const macdData = calculateMACD(currentData);
        macdSeries.setData(macdData);
    } else {
        macdSeries.setData([]);
    }

    // Bollinger Bands
    if (indicators.bollinger) {
        const bbData = calculateBollingerBands(currentData, 20, 2);
        bollingerSeries.setData(bbData);
    } else {
        bollingerSeries.setData([]);
    }
}

// –†–∞—Å—á–µ—Ç SMA
function calculateSMA(data, period) {
    const smaData = [];
    for (let i = period - 1; i < data.length; i++) {
        let sum = 0;
        for (let j = 0; j < period; j++) {
            sum += data[i - j].close;
        }
        smaData.push({
            time: data[i].time,
            value: sum / period
        });
    }
    return smaData;
}

// –†–∞—Å—á–µ—Ç EMA
function calculateEMA(data, period) {
    const emaData = [];
    const multiplier = 2 / (period + 1);
    
    // –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ EMA - —ç—Ç–æ SMA
    let ema = data.slice(0, period).reduce((sum, d) => sum + d.close, 0) / period;
    emaData.push({ time: data[period - 1].time, value: ema });
    
    for (let i = period; i < data.length; i++) {
        ema = (data[i].close - ema) * multiplier + ema;
        emaData.push({ time: data[i].time, value: ema });
    }
    
    return emaData;
}

// –†–∞—Å—á–µ—Ç RSI
function calculateRSI(data, period) {
    const rsiData = [];
    const gains = [];
    const losses = [];
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    for (let i = 1; i < data.length; i++) {
        const change = data[i].close - data[i - 1].close;
        gains.push(change > 0 ? change : 0);
        losses.push(change < 0 ? Math.abs(change) : 0);
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI
    for (let i = period; i < gains.length; i++) {
        const avgGain = gains.slice(i - period, i).reduce((sum, g) => sum + g, 0) / period;
        const avgLoss = losses.slice(i - period, i).reduce((sum, l) => sum + l, 0) / period;
        
        const rs = avgLoss === 0 ? 100 : avgGain / avgLoss;
        const rsi = 100 - (100 / (1 + rs));
        
        rsiData.push({
            time: data[i + 1].time, // +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã –Ω–∞—á–∞–ª–∏ —Å i=1 –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            value: rsi
        });
    }
    
    return rsiData;
}

// –†–∞—Å—á–µ—Ç MACD
function calculateMACD(data) {
    const ema12 = calculateEMA(data, 12);
    const ema26 = calculateEMA(data, 26);
    
    const macdData = [];
    const minLength = Math.min(ema12.length, ema26.length);
    
    for (let i = 0; i < minLength; i++) {
        const macd = ema12[ema12.length - minLength + i].value - ema26[ema26.length - minLength + i].value;
        macdData.push({
            time: ema26[ema26.length - minLength + i].time,
            value: macd
        });
    }
    
    return macdData;
}

// –†–∞—Å—á–µ—Ç Bollinger Bands
function calculateBollingerBands(data, period, stdDev) {
    const bbData = [];
    
    for (let i = period - 1; i < data.length; i++) {
        const slice = data.slice(i - period + 1, i + 1);
        const prices = slice.map(d => d.close);
        const mean = prices.reduce((sum, p) => sum + p, 0) / period;
        
        const squaredDiffs = prices.map(p => Math.pow(p - mean, 2));
        const variance = squaredDiffs.reduce((sum, sd) => sum + sd, 0) / period;
        const standardDeviation = Math.sqrt(variance);
        
        bbData.push({
            time: data[i].time,
            value: mean + (standardDeviation * stdDev)
        });
    }
    
    return bbData;
}

// WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function setupWebSocket() {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º wss –ø–æ—Ç–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫ –∫–∞–∫ Binance —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á
        const wsUrl = 'wss://stream.binance.com:9443/ws/btcusdt@kline_1m';
        
        wsConnection = new WebSocket(wsUrl);
        
        wsConnection.onopen = function() {
            console.log('WebSocket connected');
        };
        
        wsConnection.onmessage = function(event) {
            const data = JSON.parse(event.data);
            
            if (data.k) {
                const kline = data.k;
                const newCandle = {
                    time: kline.t / 1000,
                    open: parseFloat(kline.o),
                    high: parseFloat(kline.h),
                    low: parseFloat(kline.l),
                    close: parseFloat(kline.c),
                    volume: parseFloat(kline.v)
                };
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                updateCurrentPrice(newCandle.close);
                
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                // –ù–æ –¥–ª—è –¥–µ–º–æ –º—ã –±—É–¥–µ–º –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
            }
        };
        
        wsConnection.onerror = function(error) {
            console.error('WebSocket error:', error);
            // Fallback –Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            setInterval(loadChartData, 30000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        };
        
        wsConnection.onclose = function() {
            console.log('WebSocket disconnected');
        };
        
    } catch (error) {
        console.error('WebSocket setup failed:', error);
        // Fallback –Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        setInterval(loadChartData, 30000);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
function updateCurrentPrice(price) {
    const priceElement = document.querySelector('.asset-price');
    const changeElement = document.querySelector('.price-change');
    const previousPrice = parseFloat(priceElement.textContent.replace('$', '')) || price;
    
    const change = price - previousPrice;
    const changePercent = ((change / previousPrice) * 100).toFixed(2);
    
    priceElement.textContent = `$${price.toFixed(2)}`;
    
    if (change >= 0) {
        changeElement.textContent = `+${changePercent}%`;
        changeElement.className = 'price-change positive';
    } else {
        changeElement.textContent = `${changePercent}%`;
        changeElement.className = 'price-change negative';
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    priceElement.classList.add('price-update');
    setTimeout(() => {
        priceElement.classList.remove('price-update');
    }, 1000);
}

// –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
function executeTrade(type) {
    const amountInput = document.getElementById('tradeAmount');
    const amount = parseFloat(amountInput.value);
    
    if (!amount || amount <= 0) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É', 'error');
        return;
    }
    
    if (type === 'buy' && amount > balance) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
        return;
    }
    
    const currentPrice = getCurrentPrice();
    const totalCost = amount * currentPrice;
    const fee = totalCost * (tradingFees / 100);
    
    if (type === 'buy') {
        // –ü–æ–∫—É–ø–∫–∞
        balance -= totalCost + fee;
        portfolio[currentAsset.replace('USDT', '')] = (portfolio[currentAsset.replace('USDT', '')] || 0) + amount;
        
        tradeHistory.push({
            type: 'BUY',
            asset: currentAsset,
            amount: amount,
            price: currentPrice,
            total: totalCost,
            fee: fee,
            timestamp: new Date().toLocaleString()
        });
        
        showNotification(`–ö—É–ø–ª–µ–Ω–æ ${amount} ${currentAsset} –∑–∞ $${totalCost.toFixed(2)}`, 'success');
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        checkAchievements();
        
    } else {
        // –ü—Ä–æ–¥–∞–∂–∞
        const asset = currentAsset.replace('USDT', '');
        if (!portfolio[asset] || portfolio[asset] < amount) {
            showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏', 'error');
            return;
        }
        
        portfolio[asset] -= amount;
        balance += totalCost - fee;
        
        tradeHistory.push({
            type: 'SELL',
            asset: currentAsset,
            amount: amount,
            price: currentPrice,
            total: totalCost,
            fee: fee,
            timestamp: new Date().toLocaleString()
        });
        
        showNotification(`–ü—Ä–æ–¥–∞–Ω–æ ${amount} ${currentAsset} –∑–∞ $${totalCost.toFixed(2)}`, 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateAdvancedStats();
    }
    
    updateUI();
    updatePortfolioDisplay();
    updateTradeHistory();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
function getCurrentPrice() {
    if (currentData.length > 0) {
        return currentData[currentData.length - 1].close;
    }
    return 50000; // Fallback —Ü–µ–Ω–∞
}

// –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤
function calculateRiskManagement() {
    const riskAmount = parseFloat(document.getElementById('riskAmount').value) || 0;
    const stopLoss = parseFloat(document.getElementById('stopLoss').value) || 0;
    const takeProfit = parseFloat(document.getElementById('takeProfit').value) || 0;
    
    if (!riskAmount || !stopLoss || !takeProfit) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ä–∏—Å–∫–æ–≤', 'warning');
        return;
    }
    
    const currentPrice = getCurrentPrice();
    const riskPerShare = Math.abs(currentPrice - stopLoss);
    const rewardPerShare = Math.abs(takeProfit - currentPrice);
    
    const positionSize = riskAmount / riskPerShare;
    const potentialLoss = positionSize * riskPerShare;
    const potentialProfit = positionSize * rewardPerShare;
    const riskRewardRatio = rewardPerShare / riskPerShare;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    document.getElementById('positionSize').textContent = positionSize.toFixed(4);
    document.getElementById('potentialLoss').textContent = `$${potentialLoss.toFixed(2)}`;
    document.getElementById('potentialProfit').textContent = `$${potentialProfit.toFixed(2)}`;
    document.getElementById('riskRewardRatio').textContent = riskRewardRatio.toFixed(2);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (stopLoss > 0) {
        dailyQuests.useStopLoss.progress++;
        if (dailyQuests.useStopLoss.progress >= dailyQuests.useStopLoss.target) {
            dailyQuests.useStopLoss.completed = true;
            unlockAchievement('riskManager');
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateAdvancedStats() {
    if (tradeHistory.length === 0) return;
    
    const profitableTrades = tradeHistory.filter(t => {
        if (t.type === 'BUY') return false;
        // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–∏–±—ã–ª—å–Ω—ã–º–∏
        return true;
    });
    
    const losingTrades = tradeHistory.filter(t => {
        if (t.type === 'BUY') return false;
        // –î–ª—è –¥–µ–º–æ —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–∏–±—ã–ª—å–Ω—ã–º–∏
        return false;
    });
    
    advancedStats.totalTrades = tradeHistory.length;
    advancedStats.winningTrades = profitableTrades.length;
    advancedStats.losingTrades = losingTrades.length;
    advancedStats.winRate = (advancedStats.winningTrades / advancedStats.totalTrades * 100).toFixed(1);
    
    updateStatsDisplay();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatsDisplay() {
    document.getElementById('totalTrades').textContent = advancedStats.totalTrades;
    document.getElementById('winRate').textContent = `${advancedStats.winRate}%`;
    document.getElementById('totalProfit').textContent = `$${advancedStats.totalProfit.toFixed(2)}`;
    document.getElementById('bestTrade').textContent = `$${advancedStats.averageWin.toFixed(2)}`;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements() {
    // –ü–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞
    if (tradeHistory.length >= 1 && !achievements.firstTrade.unlocked) {
        unlockAchievement('firstTrade');
    }
    
    // 3 —Å–¥–µ–ª–∫–∏ –ø–æ–¥—Ä—è–¥
    if (tradeHistory.length >= 3 && !achievements.streak3.unlocked) {
        unlockAchievement('streak3');
    }
    
    // –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
    const totalVolume = tradeHistory.reduce((sum, trade) => sum + trade.amount, 0);
    if (totalVolume >= 10 && !achievements.volumeTrader.unlocked) {
        unlockAchievement('volumeTrader');
    }
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    const indicatorsUsed = Object.values(indicators).filter(val => val).length;
    if (indicatorsUsed >= 3 && !achievements.analyst.unlocked) {
        unlockAchievement('analyst');
    }
    
    updateQuestsProgress();
}

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function unlockAchievement(achievementKey) {
    const achievement = achievements[achievementKey];
    if (achievement && !achievement.unlocked) {
        achievement.unlocked = true;
        balance += achievement.reward;
        userXP += achievement.xp;
        
        showNotification(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${getAchievementName(achievementKey)}! +$${achievement.reward}`, 'success');
        updateAchievementsDisplay();
        updateUI();
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function getAchievementName(key) {
    const names = {
        firstTrade: '–ü–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞',
        profit10: '–ü—Ä–∏–±—ã–ª—å $10',
        riskManager: '–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä',
        streak3: '–°–µ—Ä–∏—è –∏–∑ 3 —Å–¥–µ–ª–æ–∫',
        volumeTrader: '–û–±—ä–µ–º–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä',
        analyst: '–ê–Ω–∞–ª–∏—Ç–∏–∫'
    };
    return names[key] || key;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–æ–≤
function updateQuestsProgress() {
    dailyQuests.trade3.progress = Math.min(tradeHistory.length, dailyQuests.trade3.target);
    
    if (dailyQuests.trade3.progress >= dailyQuests.trade3.target && !dailyQuests.trade3.completed) {
        dailyQuests.trade3.completed = true;
        balance += dailyQuests.trade3.reward;
        userXP += dailyQuests.trade3.xp;
        showNotification(`–ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: 3 —Å–¥–µ–ª–∫–∏! +$${dailyQuests.trade3.reward}`, 'success');
    }
    
    updateQuestsDisplay();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
    updateBalanceDisplay();
    updatePortfolioDisplay();
    updateTradeHistory();
    updateTradingInfo();
    updateAchievementsDisplay();
    updateQuestsDisplay();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
function updateBalanceDisplay() {
    document.querySelector('.balance-amount').textContent = `$${balance.toFixed(2)}`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
function updatePortfolioDisplay() {
    const portfolioGrid = document.querySelector('.portfolio-grid');
    if (!portfolioGrid) return;
    
    let totalValue = balance;
    let portfolioHTML = '';
    
    Object.keys(portfolio).forEach(asset => {
        if (portfolio[asset] > 0) {
            const assetValue = portfolio[asset] * getCurrentPrice(); // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            totalValue += assetValue;
            portfolioHTML += `
                <div class="portfolio-item">
                    <span>${asset}</span>
                    <span>${portfolio[asset].toFixed(4)} ($${assetValue.toFixed(2)})</span>
                </div>
            `;
        }
    });
    
    portfolioHTML += `
        <div class="portfolio-item total">
            <span>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å</span>
            <span>$${totalValue.toFixed(2)}</span>
        </div>
    `;
    
    portfolioGrid.innerHTML = portfolioHTML;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤
function updateTradeHistory() {
    const historyList = document.querySelector('.history-list');
    if (!historyList) return;
    
    if (tradeHistory.length === 0) {
        historyList.innerHTML = '<div class="empty-history">–ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤ –ø—É—Å—Ç–∞</div>';
        return;
    }
    
    let historyHTML = '';
    tradeHistory.slice(-10).reverse().forEach(trade => {
        const isProfit = trade.type === 'SELL';
        historyHTML += `
            <div class="history-item ${isProfit ? '' : 'loss'}">
                <div class="history-info">
                    <span class="history-type">${trade.type} ${trade.asset}</span>
                    <span class="history-details">
                        ${trade.amount} –ø–æ $${trade.price.toFixed(2)} | ${trade.timestamp}
                    </span>
                </div>
                <div class="history-amount ${isProfit ? 'profit' : 'loss'}">
                    ${trade.type === 'BUY' ? '-' : '+'}$${trade.total.toFixed(2)}
                </div>
            </div>
        `;
    });
    
    historyList.innerHTML = historyHTML;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ
function updateTradingInfo() {
    document.getElementById('leverageValue').textContent = `${leverage}x`;
    
    const feesDisplay = document.querySelector('.trading-fees-display');
    if (feesDisplay) {
        feesDisplay.textContent = `–ö–æ–º–∏—Å—Å–∏—è: ${tradingFees}% | –°–ø—Ä–µ–¥: ${spread}% | –ü–ª–µ—á–æ: ${leverage}x`;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function updateAchievementsDisplay() {
    const achievementsGrid = document.querySelector('.achievements-grid');
    if (!achievementsGrid) return;
    
    let achievementsHTML = '';
    Object.keys(achievements).forEach(key => {
        const achievement = achievements[key];
        achievementsHTML += `
            <div class="achievement-card ${achievement.unlocked ? 'unlocked' : 'locked'}">
                <div class="achievement-icon">üèÜ</div>
                <div class="achievement-title">${getAchievementName(key)}</div>
                <div class="achievement-desc">${achievement.unlocked ? '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'}</div>
                <div class="achievement-reward">+$${achievement.reward}</div>
            </div>
        `;
    });
    
    achievementsGrid.innerHTML = achievementsHTML;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤
function updateQuestsDisplay() {
    const questsGrid = document.querySelector('.quests-grid');
    if (!questsGrid) return;
    
    let questsHTML = '';
    Object.keys(dailyQuests).forEach(key => {
        const quest = dailyQuests[key];
        const progressPercent = (quest.progress / quest.target) * 100;
        
        questsHTML += `
            <div class="quest-card ${quest.completed ? 'completed' : ''}">
                <div class="quest-title">${getQuestName(key)}</div>
                <div class="quest-desc">–ü—Ä–æ–≥—Ä–µ—Å—Å: ${quest.progress}/${quest.target}</div>
                <div class="quest-progress">
                    <div class="quest-progress-bar" style="width: ${progressPercent}%"></div>
                </div>
                <div class="quest-reward">–ù–∞–≥—Ä–∞–¥–∞: +$${quest.reward}</div>
            </div>
        `;
    });
    
    questsGrid.innerHTML = questsHTML;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞
function getQuestName(key) {
    const names = {
        trade3: '3 —Å–¥–µ–ª–∫–∏ –∑–∞ –¥–µ–Ω—å',
        useStopLoss: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å 5 —Ä–∞–∑',
        profit5: '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $5'
    };
    return names[key] || key;
}

// –£—á–∏—Ç–µ–ª—å –∏ AI –ø–æ–º–æ—â–Ω–∏–∫
function initializeTeacher() {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤
    const dictionaryGrid = document.querySelector('.dictionary-grid');
    if (dictionaryGrid) {
        let dictionaryHTML = '';
        Object.keys(teacherKnowledge.dictionary).forEach(term => {
            dictionaryHTML += `
                <div class="dictionary-term">
                    <span class="term-name">${term}</span>
                    <span class="term-desc">${teacherKnowledge.dictionary[term].substring(0, 50)}...</span>
                </div>
            `;
        });
        dictionaryGrid.innerHTML = dictionaryHTML;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤
        document.querySelectorAll('.dictionary-term').forEach(term => {
            term.addEventListener('click', function() {
                const termName = this.querySelector('.term-name').textContent;
                showTermDefinition(termName);
            });
        });
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —É—Ä–æ–∫–∏
    const lessonsGrid = document.querySelector('.lessons-grid');
    if (lessonsGrid) {
        let lessonsHTML = '';
        Object.keys(teacherKnowledge.lessons).forEach(lessonKey => {
            const lesson = teacherKnowledge.lessons[lessonKey];
            lessonsHTML += `
                <div class="lesson-card" data-lesson="${lessonKey}">
                    <span class="lesson-title">${lesson.title}</span>
                    <span class="lesson-desc">${lesson.content.substring(0, 80)}...</span>
                </div>
            `;
        });
        lessonsGrid.innerHTML = lessonsHTML;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É—Ä–æ–∫–æ–≤
        document.querySelectorAll('.lesson-card').forEach(card => {
            card.addEventListener('click', function() {
                const lessonKey = this.getAttribute('data-lesson');
                showLesson(lessonKey);
            });
        });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
function showTermDefinition(term) {
    const definition = teacherKnowledge.dictionary[term];
    if (definition) {
        document.getElementById('term-title').textContent = term;
        document.getElementById('term-description').textContent = definition;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        const termSection = document.querySelector('[data-section="term-details"]');
        if (termSection) {
            termSection.style.display = 'block';
        }
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫
function showLesson(lessonKey) {
    const lesson = teacherKnowledge.lessons[lessonKey];
    if (lesson) {
        document.getElementById('term-title').textContent = lesson.title;
        document.getElementById('term-description').textContent = lesson.content;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Å —É—Ä–æ–∫–æ–º
        const termSection = document.querySelector('[data-section="term-details"]');
        if (termSection) {
            termSection.style.display = 'block';
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —É—á–∏—Ç–µ–ª—é
function askTeacherQuestion() {
    const questionInput = document.getElementById('teacherQuestion');
    const question = questionInput.value.toLowerCase().trim();
    
    if (!question) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å', 'warning');
        return;
    }
    
    let answer = null;
    
    // –ò—â–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    Object.keys(teacherKnowledge.questions).forEach(key => {
        if (question.includes(key)) {
            answer = teacherKnowledge.questions[key];
        }
    });
    
    if (!answer) {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        const keywords = question.split(' ');
        for (let keyword of keywords) {
            if (keyword.length > 3) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                Object.keys(teacherKnowledge.questions).forEach(key => {
                    if (key.includes(keyword) && !answer) {
                        answer = teacherKnowledge.questions[key];
                    }
                });
            }
        }
    }
    
    if (!answer) {
        answer = "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–£—Ä–æ–∫–∏'. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ: —Ç—Ä–µ–π–¥–∏–Ω–≥–µ, —Å—Ç–æ–ø-–ª–æ—Å—Å–µ, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–µ, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∏—Å–∫–∞–º–∏.";
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    document.getElementById('term-title').textContent = '–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å';
    document.getElementById('term-description').textContent = answer;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Å –æ—Ç–≤–µ—Ç–æ–º
    const termSection = document.querySelector('[data-section="term-details"]');
    if (termSection) {
        termSection.style.display = 'block';
    }
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    questionInput.value = '';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —É—á–∏—Ç–µ–ª—è
function handleTeacherAction(action) {
    switch(action) {
        case 'explain-chart':
            showLesson('candles');
            break;
        case 'explain-indicators':
            showLesson('indicators');
            break;
        case 'risk-advice':
            showLesson('risk');
            break;
        case 'trading-strategy':
            showLesson('strategies');
            break;
        case 'market-analysis':
            analyzeCurrentMarket();
            break;
        case 'portfolio-review':
            reviewPortfolio();
            break;
    }
}

// –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä—ã–Ω–∫–∞
function analyzeCurrentMarket() {
    if (currentData.length === 0) {
        showNotification('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', 'warning');
        return;
    }
    
    const latestData = currentData[currentData.length - 1];
    const price = latestData.close;
    const volume = latestData.volume;
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
    let trend = '–±–æ–∫–æ–≤–æ–π';
    if (currentData.length >= 5) {
        const recentPrices = currentData.slice(-5).map(d => d.close);
        const priceChange = recentPrices[4] - recentPrices[0];
        const changePercent = (priceChange / recentPrices[0]) * 100;
        
        if (changePercent > 2) trend = '–±—ã—á–∏–π';
        else if (changePercent < -2) trend = '–º–µ–¥–≤–µ–∂–∏–π';
    }
    
    const analysis = `–¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞:
‚Ä¢ –¶–µ–Ω–∞: $${price.toFixed(2)}
‚Ä¢ –¢—Ä–µ–Ω–¥: ${trend}
‚Ä¢ –û–±—ä–µ–º: ${volume.toFixed(2)}
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${getTradingRecommendation(trend)}`;

    document.getElementById('term-title').textContent = '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞';
    document.getElementById('term-description').textContent = analysis;
    
    const termSection = document.querySelector('[data-section="term-details"]');
    if (termSection) {
        termSection.style.display = 'block';
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
function getTradingRecommendation(trend) {
    switch(trend) {
        case '–±—ã—á–∏–π':
            return '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –æ—Ç–∫–∞—Ç–∞—Ö –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ';
        case '–º–µ–¥–≤–µ–∂–∏–π':
            return '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –æ—Ç—Å–∫–æ–∫–∞—Ö –∫ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—é';
        default:
            return '–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è';
    }
}

// –û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
function reviewPortfolio() {
    const totalValue = Object.keys(portfolio).reduce((sum, asset) => {
        return sum + (portfolio[asset] * getCurrentPrice());
    }, balance);
    
    const review = `–û–±–∑–æ—Ä –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è:
‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${totalValue.toFixed(2)}
‚Ä¢ –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: $${balance.toFixed(2)}
‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: ${Object.keys(portfolio).filter(a => portfolio[a] > 0).length} –∞–∫—Ç–∏–≤–æ–≤

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
${getPortfolioRecommendations()}`;

    document.getElementById('term-title').textContent = '–û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è';
    document.getElementById('term-description').textContent = review;
    
    const termSection = document.querySelector('[data-section="term-details"]');
    if (termSection) {
        termSection.style.display = 'block';
    }
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
function getPortfolioRecommendations() {
    const assetsCount = Object.keys(portfolio).filter(a => portfolio[a] > 0).length;
    
    if (assetsCount === 0) {
        return '‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è\n‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤\n‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏';
    } else if (assetsCount < 3) {
        return '‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è\n‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ 1-2 –∞–∫—Ç–∏–≤–∞\n‚Ä¢ –ë–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ —Ä–∏—Å–∫–∏';
    } else {
        return '‚Ä¢ –•–æ—Ä–æ—à–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è\n‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏\n‚Ä¢ –†–µ–±–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏';
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function toggleSidebar() {
    document.querySelector('.sidebar').classList.toggle('collapsed');
}

function showSection(section) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    document.querySelectorAll('.content-section').forEach(sec => {
        sec.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
    const targetSection = document.querySelector(`[data-section="${section}"]`);
    if (targetSection) {
        targetSection.style.display = 'block';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-section="${section}"]`).classList.add('active');
}

function showLoading() {
    const overlay = document.querySelector('.loading-overlay');
    if (overlay) {
        overlay.style.display = 'flex';
    }
}

function hideLoading() {
    const overlay = document.querySelector('.loading-overlay');
    if (overlay) {
        overlay.style.display = 'none';
    }
}

function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        background: ${type === 'error' ? '#cf6679' : type === 'success' ? '#00c853' : '#2962ff'};
        color: white;
        border-radius: 8px;
        z-index: 10000;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        transform: translateX(100%);
        transition: transform 0.3s ease;
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function exportData() {
    const data = {
        balance: balance,
        portfolio: portfolio,
        tradeHistory: tradeHistory,
        settings: {
            leverage: leverage,
            tradingFees: tradingFees
        }
    };
    
    const dataStr = JSON.stringify(data, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = 'trading-data.json';
    link.click();
}

// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function importData(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const data = JSON.parse(e.target.result);
            
            if (data.balance !== undefined) balance = data.balance;
            if (data.portfolio) portfolio = {...portfolio, ...data.portfolio};
            if (data.tradeHistory) tradeHistory = data.tradeHistory;
            if (data.settings) {
                if (data.settings.leverage) leverage = data.settings.leverage;
                if (data.settings.tradingFees) tradingFees = data.settings.tradingFees;
            }
            
            updateUI();
            showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
        } catch (error) {
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    };
    reader.readAsText(file);
}

// –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
function resetData() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        balance = 100.00;
        portfolio = {
            'BTC': 0,
            'ETH': 0, 
            'SOL': 0,
            'ADA': 0,
            'DOT': 0
        };
        tradeHistory = [];
        activeOrders = [];
        
        updateUI();
        showNotification('–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã', 'info');
    }
}
