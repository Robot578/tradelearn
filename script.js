// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let chart;
let candleSeries;
let smaSeries;
let emaSeries;
let rsiSeries;
let volumeSeries;
let currentData = [];
let balance = 100.00;
let portfolio = {
    'BTC': 0,
    'ETH': 0, 
    'SOL': 0,
    'ADA': 0,
    'DOT': 0,
    'BNB': 0,
    'XRP': 0,
    'DOGE': 0
};
let tradeHistory = [];
let activeOrders = [];
let currentAsset = 'BTCUSDT';
let currentTimeframe = '1h';
let indicators = {
    sma: true,
    ema: false,
    rsi: false,
    macd: false,
    bollinger: false
};
let wsConnection = null;
let marketData = {};
let tradingSignals = [];
let equityCurve = [100];

// –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—á–∏—Ç–µ–ª—è
const teacherKnowledge = {
    questions: {
        '—á—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–µ–π–¥–∏–Ω–≥': '–¢—Ä–µ–π–¥–∏–Ω–≥ - —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ç–∏–≤–æ–≤ (–∞–∫—Ü–∏–π, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –≤–∞–ª—é—Ç) —Å —Ü–µ–ª—å—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Ö —Ü–µ–Ω.',
        '–∫–∞–∫ –Ω–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å': '–ù–∞—á–Ω–∏—Ç–µ —Å –∏–∑—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–º–æ-—Å—á–µ—Ç –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫': '–°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ö–∞–∂–¥–∞—è —Å–≤–µ—á–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –æ—Ç–∫—Ä—ã—Ç–∏—è, –∑–∞–∫—Ä—ã—Ç–∏—è, –º–∞–∫—Å–∏–º—É–º –∏ –º–∏–Ω–∏–º—É–º.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–æ–ø –ª–æ—Å—Å': '–°—Ç–æ–ø-–ª–æ—Å—Å - —ç—Ç–æ –æ—Ä–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —É–±—ã—Ç–∫–∞, —á—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ—Ç–µ—Ä–∏.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ —Ç–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç': '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç - —ç—Ç–æ –æ—Ä–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–±—ã–ª–∏.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ rsi': 'RSI (Relative Strength Index) - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (–≤—ã—à–µ 70) –∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (–Ω–∏–∂–µ 30) —Ä—ã–Ω–∫–∞.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ macd': 'MACD (Moving Average Convergence Divergence) - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏–ª—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ –±–æ–ª–ª–∏–Ω–¥–∂–µ—Ä': '–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Ç—Ä–µ—Ö –ª–∏–Ω–∏–π: —Å—Ä–µ–¥–Ω–µ–π (SMA) –∏ –¥–≤—É—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ': '–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ —Å—É–º–º—ã, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –≤–∞—à –¥–µ–ø–æ–∑–∏—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞—è –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å, —Ç–∞–∫ –∏ —É–±—ã—Ç–∫–∏.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ –±—ã—á–∏–π —Ä—ã–Ω–æ–∫': '–ë—ã—á–∏–π —Ä—ã–Ω–æ–∫ - –ø–µ—Ä–∏–æ–¥ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω, –æ–ø—Ç–∏–º–∏–∑–º–∞ –∏ –≤—ã—Å–æ–∫–æ–≥–æ —Å–ø—Ä–æ—Å–∞ –Ω–∞ –∞–∫—Ç–∏–≤—ã.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ –º–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫': '–ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ - –ø–µ—Ä–∏–æ–¥ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω, –ø–µ—Å—Å–∏–º–∏–∑–º–∞ –∏ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤.'
    },
    
    lessons: {
        'basics': {
            title: 'üìñ –û—Å–Ω–æ–≤—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞',
            content: `–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞:
            
1. **–ê–∫—Ç–∏–≤** - —Ç–æ, —á–µ–º –≤—ã —Ç–æ—Ä–≥—É–µ—Ç–µ (–∞–∫—Ü–∏–∏, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –≤–∞–ª—é—Ç–∞)
2. **–õ–æ—Ç** - —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
3. **–ü—É–Ω–∫—Ç (–ø–∏–ø—Å)** - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
4. **–°–ø—Ä–µ–¥** - —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏
5. **–ú–∞—Ä–∂–∞** - –∑–∞–ª–æ–≥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
6. **–ü–ª–µ—á–æ** - –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ç–æ—Ä–≥–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            
–°–æ–≤–µ—Ç: –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∞–ª–µ–Ω—å–∫–∏—Ö –æ–±—ä–µ–º–æ–≤ –∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å!`
        },
        'candles': {
            title: 'üïØÔ∏è –°–≤–µ—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑',
            content: `–Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏ - –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
            
**–°—Ç—Ä–æ–µ–Ω–∏–µ —Å–≤–µ—á–∏:**
- –¢–µ–ª–æ (open-close)
- –¢–µ–Ω–∏ (high-low)
            
**–¢–∏–ø—ã —Å–≤–µ—á–µ–π:**
- –ë—ã—á—å—è (–∑–µ–ª–µ–Ω–∞—è) - close > open
- –ú–µ–¥–≤–µ–∂—å—è (–∫—Ä–∞—Å–Ω–∞—è) - close < open
            
**–ü–∞—Ç—Ç–µ—Ä–Ω—ã:**
- –ú–æ–ª–æ—Ç (—Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö)
- –ü–æ–≤–µ—à–µ–Ω–Ω—ã–π (—Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–Ω–∏–∑)
- –ü–æ–≥–ª–æ—â–µ–Ω–∏–µ (—Å–º–µ–Ω–∞ —Ç—Ä–µ–Ω–¥–∞)
- –î–æ–¥–∂–∏ (–Ω–µ—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)`
        },
        'indicators': {
            title: 'üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã',
            content: `–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
            
**–¢—Ä–µ–Ω–¥–æ–≤—ã–µ:**
- SMA (–ø—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è)
- EMA (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è)
- MACD (—Å—Ö–æ–∂–¥–µ–Ω–∏–µ/—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ)
            
**–û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã:**
- RSI (–∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã)
- Stochastic (—Å—Ç–æ—Ö–∞—Å—Ç–∏–∫)
- CCI (–∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞)
            
**–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:**
- –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
- ATR (—Å—Ä–µ–¥–Ω–∏–π –∏—Å—Ç–∏–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)`
        },
        'risk': {
            title: 'üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏',
            content: `–ü—Ä–∞–≤–∏–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏:
            
1. **–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É**: –Ω–µ –±–æ–ª–µ–µ 1-2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
2. **–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å**: –º–∏–Ω–∏–º—É–º 1:2
3. **–°—Ç–æ–ø-–ª–æ—Å—Å**: –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏
4. **–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è**: –Ω–µ –≤–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –≤—Å–µ –≤ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤
5. **–≠–º–æ—Ü–∏–∏**: —Ç–æ—Ä–≥—É–π—Ç–µ –ø–æ –ø–ª–∞–Ω—É, –∞ –Ω–µ –Ω–∞ —ç–º–æ—Ü–∏—è—Ö
            
–§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞:
–û–±—ä–µ–º = (–î–µ–ø–æ–∑–∏—Ç √ó –†–∏—Å–∫%) / (–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ - –°—Ç–æ–ø-–ª–æ—Å—Å)`
        },
        'macd': {
            title: 'üìà MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä',
            content: `MACD (Moving Average Convergence Divergence):
            
**–°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ:**
- MACD –ª–∏–Ω–∏—è (12 EMA - 26 EMA)
- –°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è (9 EMA –æ—Ç MACD)
- –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ª–∏–Ω–∏—è–º–∏)
            
**–°–∏–≥–Ω–∞–ª—ã:**
- –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π - –ø–æ–∫—É–ø–∫–∞
- –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π - –ø—Ä–æ–¥–∞–∂–∞
- –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è - —Å–∏–ª—å–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            
**–ù–∞—Å—Ç—Ä–æ–π–∫–∏**: 12, 26, 9 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)`
        },
        'bollinger': {
            title: 'üìä –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞',
            content: `–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏:
            
**–°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ:**
- –°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è (20 SMA)
- –í–µ—Ä—Ö–Ω—è—è –ø–æ–ª–æ—Å–∞ (SMA + 2œÉ)
- –ù–∏–∂–Ω—è—è –ø–æ–ª–æ—Å–∞ (SMA - 2œÉ)
            
**–°–∏–≥–Ω–∞–ª—ã:**
- –û—Ç—Å–∫–æ–∫ –æ—Ç –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã - –ø–æ–∫—É–ø–∫–∞
- –û—Ç—Å–∫–æ–∫ –æ—Ç –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã - –ø—Ä–æ–¥–∞–∂–∞
- –°—É–∂–µ–Ω–∏–µ –ø–æ–ª–æ—Å - —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
- –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–ª–æ—Å - —Ä–æ—Å—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            
**–í–∞–∂–Ω–æ**: 95% —Ü–µ–Ω –¥–≤–∏–∂—É—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–æ—Å`
        }
    },
    
    dictionary: {
        'sma': {
            title: 'SMA (Simple Moving Average)',
            description: '–ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è - —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –°–≥–ª–∞–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω–æ–≤—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞.'
        },
        'ema': {
            title: 'EMA (Exponential Moving Average)',
            description: '–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è - –ø—Ä–∏–¥–∞–µ—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ü–µ–Ω–∞–º, –±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ–º SMA.'
        },
        'rsi': {
            title: 'RSI (Relative Strength Index)',
            description: '–ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã - –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä –æ—Ç 0 –¥–æ 100. –í—ã—à–µ 70 - –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å, –Ω–∏–∂–µ 30 - –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å.'
        },
        'macd': {
            title: 'MACD',
            description: 'Moving Average Convergence Divergence - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É –¥–≤—É–º—è —Å–∫–æ–ª—å–∑—è—â–∏–º–∏ —Å—Ä–µ–¥–Ω–∏–º–∏. –°–æ—Å—Ç–æ–∏—Ç –∏–∑ MACD –ª–∏–Ω–∏–∏, —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã.'
        },
        'bollinger': {
            title: '–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞',
            description: 'Bollinger Bands - —Å–æ—Å—Ç–æ—è—Ç –∏–∑ —Å—Ä–µ–¥–Ω–µ–π SMA –∏ –¥–≤—É—Ö –ø–æ–ª–æ—Å –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 2 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π. –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ —É—Ä–æ–≤–Ω–∏ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏.'
        },
        'stoploss': {
            title: 'Stop-Loss',
            description: '–°—Ç–æ–ø-–ª–æ—Å—Å - –æ—Ä–¥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —É–±—ã—Ç–∫–æ–≤. –û–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏.'
        },
        'takeprofit': {
            title: 'Take-Profit', 
            description: '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç - –æ—Ä–¥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–±—ã–ª–∏. –ü–æ–º–æ–≥–∞–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å.'
        },
        'leverage': {
            title: '–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ',
            description: 'Leverage - –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –æ–±—ä–µ–º–∞–º–∏, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–º–∏ –≤–∞—à –¥–µ–ø–æ–∑–∏—Ç. –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–∞–∫ –ø—Ä–∏–±—ã–ª—å, —Ç–∞–∫ –∏ —É–±—ã—Ç–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!'
        },
        'bullmarket': {
            title: '–ë—ã—á–∏–π —Ä—ã–Ω–æ–∫',
            description: 'Bull Market - –ø–µ—Ä–∏–æ–¥ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω, –æ–ø—Ç–∏–º–∏–∑–º–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–æ—Å—Ç–∞. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤–æ—Å—Ö–æ–¥—è—â–∏–º —Ç—Ä–µ–Ω–¥–æ–º.'
        },
        'bearmarket': {
            title: '–ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫',
            description: 'Bear Market - –ø–µ—Ä–∏–æ–¥ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω, –ø–µ—Å—Å–∏–º–∏–∑–º–∞ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∞–¥–∞. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –Ω–∏—Å—Ö–æ–¥—è—â–∏–º —Ç—Ä–µ–Ω–¥–æ–º.'
        },
        'atr': {
            title: 'ATR (Average True Range)',
            description: '–°—Ä–µ–¥–Ω–∏–π –∏—Å—Ç–∏–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.'
        },
        'divergence': {
            title: '–î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è',
            description: '–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞. –ë—ã—á—å—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è - —Ü–µ–Ω–∞ –¥–µ–ª–∞–µ—Ç –Ω–æ–≤—ã–µ –º–∏–Ω–∏–º—É–º—ã, –∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä - –Ω–µ—Ç. –ú–µ–¥–≤–µ–∂—å—è - –Ω–∞–æ–±–æ—Ä–æ—Ç.'
        }
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    initializeApp();
});

function initializeApp() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    initializeChart();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    initializeEventHandlers();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadInitialData();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadSavedData();
    
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
}

function initializeChart() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞...');
    
    const chartContainer = document.getElementById('candleChart');
    if (!chartContainer) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    try {
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart = LightweightCharts.createChart(chartContainer, {
            width: chartContainer.clientWidth,
            height: 400,
            layout: {
                backgroundColor: '#1e1e1e',
                textColor: '#d1d4dc',
            },
            grid: {
                vertLines: {
                    color: '#2b2b43',
                },
                horzLines: {
                    color: '#2b2b43',
                },
            },
            crosshair: {
                mode: LightweightCharts.CrosshairMode.Normal,
            },
            rightPriceScale: {
                borderColor: '#485c7b',
            },
            timeScale: {
                borderColor: '#485c7b',
                timeVisible: true,
                secondsVisible: false,
            },
            handleScroll: {
                mouseWheel: true,
                pressedMouseMove: true,
            },
            handleScale: {
                axisPressedMouseMove: true,
                mouseWheel: true,
                pinch: true,
            },
        });

        // –°–æ–∑–¥–∞–µ–º —Å–≤–µ—á–Ω—É—é —Å–µ—Ä–∏—é
        candleSeries = chart.addCandlestickSeries({
            upColor: '#26a69a',
            downColor: '#ef5350',
            borderDownColor: '#ef5350',
            borderUpColor: '#26a69a',
            wickDownColor: '#ef5350',
            wickUpColor: '#26a69a',
        });

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        smaSeries = chart.addLineSeries({
            color: '#2962FF',
            lineWidth: 1,
            title: 'SMA 20',
        });

        emaSeries = chart.addLineSeries({
            color: '#FF6B6B',
            lineWidth: 1,
            title: 'EMA 12',
        });

        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è RSI
        const rsiChart = LightweightCharts.createChart(document.createElement('div'), {
            width: chartContainer.clientWidth,
            height: 150,
            layout: {
                backgroundColor: '#1e1e1e',
                textColor: '#d1d4dc',
            },
            grid: {
                vertLines: {
                    color: '#2b2b43',
                },
                horzLines: {
                    color: '#2b2b43',
                },
            },
            rightPriceScale: {
                borderColor: '#485c7b',
            },
            timeScale: {
                borderColor: '#485c7b',
                timeVisible: true,
                secondsVisible: false,
            },
        });

        rsiSeries = rsiChart.addLineSeries({
            color: '#FF9800',
            lineWidth: 1,
            title: 'RSI 14',
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        window.addEventListener('resize', function() {
            chart.applyOptions({
                width: chartContainer.clientWidth,
            });
        });

        console.log('–ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        generateSampleData();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞', 'error');
    }
}

function generateSampleData() {
    console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    const sampleData = [];
    let basePrice = 50000;
    const now = new Date();
    
    for (let i = 100; i >= 0; i--) {
        const time = new Date(now);
        time.setMinutes(time.getMinutes() - i * 60);
        
        const open = basePrice;
        const change = (Math.random() - 0.5) * 1000;
        const close = open + change;
        const high = Math.max(open, close) + Math.random() * 500;
        const low = Math.min(open, close) - Math.random() * 500;
        
        sampleData.push({
            time: Math.floor(time.getTime() / 1000),
            open: open,
            high: high,
            low: low,
            close: close,
        });
        
        basePrice = close;
    }
    
    currentData = sampleData;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    if (candleSeries) {
        candleSeries.setData(sampleData);
        calculateIndicators();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
    updateCurrentPrice(sampleData[sampleData.length - 1]);
    
    console.log('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
}

function calculateIndicators() {
    if (!currentData.length) return;
    
    // SMA 20
    const smaData = [];
    for (let i = 19; i < currentData.length; i++) {
        let sum = 0;
        for (let j = i - 19; j <= i; j++) {
            sum += currentData[j].close;
        }
        smaData.push({
            time: currentData[i].time,
            value: sum / 20
        });
    }
    
    if (indicators.sma && smaSeries) {
        smaSeries.setData(smaData);
    }
    
    // EMA 12
    const emaData = [];
    const multiplier = 2 / (12 + 1);
    let ema = currentData[0].close;
    
    emaData.push({
        time: currentData[0].time,
        value: ema
    });
    
    for (let i = 1; i < currentData.length; i++) {
        ema = (currentData[i].close - ema) * multiplier + ema;
        emaData.push({
            time: currentData[i].time,
            value: ema
        });
    }
    
    if (indicators.ema && emaSeries) {
        emaSeries.setData(emaData);
    }
}

function updateCurrentPrice(latestCandle) {
    const priceElement = document.getElementById('current-price');
    const changeElement = document.getElementById('price-change');
    
    if (priceElement && changeElement && latestCandle) {
        const price = latestCandle.close;
        const change = ((price - latestCandle.open) / latestCandle.open) * 100;
        
        priceElement.textContent = price.toFixed(2);
        changeElement.textContent = `${change >= 0 ? '+' : ''}${change.toFixed(2)}%`;
        changeElement.style.color = change >= 0 ? 'var(--profit)' : 'var(--loss)';
    }
}

function initializeEventHandlers() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const section = this.getAttribute('data-section');
            showSection(section);
        });
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ–∫—Ü–∏–π
    document.querySelectorAll('.close-section').forEach(btn => {
        btn.addEventListener('click', function() {
            hideAllSections();
        });
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    document.querySelectorAll('.timeframe-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.timeframe-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            currentTimeframe = this.getAttribute('data-tf');
            loadChartData();
        });
    });
    
    // –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞
    document.getElementById('asset-select').addEventListener('change', function() {
        currentAsset = this.value;
        loadChartData();
    });
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    document.getElementById('sma-toggle').addEventListener('change', function() {
        indicators.sma = this.checked;
        calculateIndicators();
    });
    
    document.getElementById('ema-toggle').addEventListener('change', function() {
        indicators.ema = this.checked;
        calculateIndicators();
    });
    
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–º
    document.getElementById('auto-scale-btn').addEventListener('click', function() {
        if (chart) {
            chart.timeScale().fitContent();
        }
    });
    
    document.getElementById('reset-chart-btn').addEventListener('click', function() {
        generateSampleData();
        if (chart) {
            chart.timeScale().fitContent();
        }
    });
    
    // –¢–æ—Ä–≥–æ–≤–ª—è
    document.getElementById('buy-btn').addEventListener('click', function() {
        executeTrade('buy');
    });
    
    document.getElementById('sell-btn').addEventListener('click', function() {
        executeTrade('sell');
    });
    
    document.getElementById('buy-max-btn').addEventListener('click', function() {
        executeTrade('buy', true);
    });
    
    // –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    document.querySelectorAll('.quick-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const percent = parseInt(this.getAttribute('data-percent'));
            const amountInput = document.getElementById('trade-amount');
            const maxAmount = balance;
            amountInput.value = (maxAmount * percent / 100).toFixed(2);
        });
    });
    
    // –£—á–∏—Ç–µ–ª—å
    document.getElementById('teacher-hint').addEventListener('click', function() {
        showTeacherHint();
    });
    
    document.getElementById('teacher-analysis').addEventListener('click', function() {
        showTeacherAnalysis();
    });
    
    document.getElementById('teacher-lesson').addEventListener('click', function() {
        toggleTeacherLessons();
    });
    
    document.getElementById('teacher-dictionary-btn').addEventListener('click', function() {
        toggleTeacherDictionary();
    });
    
    document.getElementById('ask-question').addEventListener('click', function() {
        askTeacherQuestion();
    });
    
    // –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤
    document.querySelectorAll('.dictionary-term').forEach(term => {
        term.addEventListener('click', function() {
            const termKey = this.getAttribute('data-term');
            showTermDetails(termKey);
        });
    });
    
    document.getElementById('close-term').addEventListener('click', function() {
        document.getElementById('term-details').style.display = 'none';
    });
    
    // –£—Ä–æ–∫–∏
    document.querySelectorAll('.lesson-card').forEach(card => {
        card.addEventListener('click', function() {
            const lessonKey = this.getAttribute('data-lesson');
            showLesson(lessonKey);
        });
    });
    
    // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∏—Å–∫–æ–≤
    document.getElementById('calculate-risk').addEventListener('click', function() {
        calculateRisk();
    });
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
    document.getElementById('create-order-btn').addEventListener('click', function() {
        createOrder();
    });
    
    // –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    document.getElementById('export-btn').addEventListener('click', exportData);
    document.getElementById('import-btn').addEventListener('click', function() {
        document.getElementById('import-file').click();
    });
    document.getElementById('import-file').addEventListener('change', importData);
    document.getElementById('backup-btn').addEventListener('click', createBackup);
    document.getElementById('reset-btn').addEventListener('click', resetData);
    
    // –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.analysis-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            const tabName = this.getAttribute('data-tab');
            switchAnalysisTab(tabName);
        });
    });
    
    // –§–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏
    document.querySelectorAll('.history-filter').forEach(filter => {
        filter.addEventListener('click', function() {
            const filterType = this.getAttribute('data-filter');
            filterHistory(filterType);
        });
    });
    
    // –§–∏–ª—å—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–æ–≤
    document.querySelectorAll('.signal-filter').forEach(filter => {
        filter.addEventListener('click', function() {
            const signalType = this.getAttribute('data-type');
            filterSignals(signalType);
        });
    });
    
    // –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    document.getElementById('show-detailed-stats').addEventListener('click', function() {
        showDetailedStatistics();
    });
    
    console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

function showSection(sectionName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    hideAllSections();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
    const section = document.getElementById(sectionName + '-section');
    if (section) {
        section.style.display = 'block';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-section') === sectionName) {
            btn.classList.add('active');
        }
    });
}

function hideAllSections() {
    document.querySelectorAll('.content-section').forEach(section => {
        section.style.display = 'none';
    });
}

function loadChartData() {
    console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${currentAsset} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ ${currentTimeframe}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingOverlay = document.getElementById('chartLoadingOverlay');
    if (loadingOverlay) {
        loadingOverlay.style.display = 'flex';
    }
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    setTimeout(() => {
        generateSampleData();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if (loadingOverlay) {
            loadingOverlay.style.display = 'none';
        }
        
        showNotification(`–ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: ${currentAsset} (${currentTimeframe})`, 'success');
    }, 1000);
}

function executeTrade(type, maxAmount = false) {
    const amountInput = document.getElementById('trade-amount');
    let amount = parseFloat(amountInput.value);
    
    if (isNaN(amount) || amount <= 0) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É', 'error');
        return;
    }
    
    if (maxAmount) {
        amount = balance;
        amountInput.value = amount.toFixed(2);
    }
    
    if (amount > balance) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
        return;
    }
    
    const currentPrice = currentData[currentData.length - 1].close;
    const assetSymbol = currentAsset.replace('USDT', '');
    
    if (type === 'buy') {
        const assetAmount = amount / currentPrice;
        portfolio[assetSymbol] = (portfolio[assetSymbol] || 0) + assetAmount;
        balance -= amount;
        
        const trade = {
            id: Date.now(),
            type: 'buy',
            asset: currentAsset,
            amount: assetAmount,
            price: currentPrice,
            total: amount,
            timestamp: new Date().toLocaleString(),
            profit: 0
        };
        
        tradeHistory.push(trade);
        showNotification(`–ö—É–ø–ª–µ–Ω–æ ${assetAmount.toFixed(6)} ${assetSymbol} –∑–∞ ${amount.toFixed(2)} USDT`, 'success');
    } else {
        const currentHolding = portfolio[assetSymbol] || 0;
        const assetAmount = amount / currentPrice;
        
        if (assetAmount > currentHolding) {
            showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏', 'error');
            return;
        }
        
        portfolio[assetSymbol] = currentHolding - assetAmount;
        balance += amount;
        
        const trade = {
            id: Date.now(),
            type: 'sell',
            asset: currentAsset,
            amount: assetAmount,
            price: currentPrice,
            total: amount,
            timestamp: new Date().toLocaleString(),
            profit: 0
        };
        
        tradeHistory.push(trade);
        showNotification(`–ü—Ä–æ–¥–∞–Ω–æ ${assetAmount.toFixed(6)} ${assetSymbol} –∑–∞ ${amount.toFixed(2)} USDT`, 'success');
    }
    
    updateBalance();
    updatePortfolio();
    updateTradeHistory();
    updateStatistics();
    saveData();
}

function updateBalance() {
    const balanceElement = document.getElementById('balance');
    if (balanceElement) {
        balanceElement.textContent = balance.toFixed(2) + ' USDT';
    }
}

function updatePortfolio() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    Object.keys(portfolio).forEach(asset => {
        const element = document.getElementById(asset.toLowerCase() + '-amount');
        if (element) {
            element.textContent = portfolio[asset].toFixed(6);
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const totalElement = document.getElementById('total-value');
    if (totalElement) {
        let total = balance;
        Object.keys(portfolio).forEach(asset => {
            if (portfolio[asset] > 0) {
                // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤
                const price = currentData[currentData.length - 1].close;
                total += portfolio[asset] * price;
            }
        });
        totalElement.textContent = total.toFixed(2) + ' USDT';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏–≤—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        equityCurve.push(total);
        updateEquityChart();
    }
}

function updateTradeHistory() {
    const historyContainer = document.getElementById('history-items');
    if (!historyContainer) return;
    
    if (tradeHistory.length === 0) {
        historyContainer.innerHTML = '<div class="empty-history">–°–¥–µ–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
        return;
    }
    
    historyContainer.innerHTML = tradeHistory.map(trade => `
        <div class="history-item ${trade.type}">
            <div class="trade-info">
                <span class="trade-type">${trade.type === 'buy' ? 'üü¢ –ü–û–ö–£–ü–ö–ê' : 'üî¥ –ü–†–û–î–ê–ñ–ê'}</span>
                <span class="trade-asset">${trade.asset}</span>
            </div>
            <div class="trade-details">
                <span>${trade.amount.toFixed(6)}</span>
                <span>${trade.price.toFixed(2)} USDT</span>
                <span>${trade.total.toFixed(2)} USDT</span>
            </div>
            <div class="trade-time">${trade.timestamp}</div>
        </div>
    `).join('');
}

function updateStatistics() {
    const totalTrades = document.getElementById('total-trades');
    const winRate = document.getElementById('win-rate');
    const totalProfit = document.getElementById('total-profit');
    const avgTrade = document.getElementById('avg-trade');
    
    if (totalTrades) {
        totalTrades.querySelector('.stat-value').textContent = tradeHistory.length;
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    if (winRate) {
        const wins = tradeHistory.filter(t => t.profit > 0).length;
        const rate = tradeHistory.length > 0 ? (wins / tradeHistory.length * 100) : 0;
        winRate.querySelector('.stat-value').textContent = rate.toFixed(1) + '%';
    }
    
    if (totalProfit) {
        const profit = equityCurve[equityCurve.length - 1] - 100;
        totalProfit.querySelector('.stat-value').textContent = profit.toFixed(2) + ' USDT';
        totalProfit.querySelector('.stat-value').style.color = profit >= 0 ? 'var(--profit)' : 'var(--loss)';
    }
}

function updateEquityChart() {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    const equityChart = document.getElementById('equity-chart');
    if (equityChart && equityCurve.length > 1) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        equityChart.innerHTML = `<div style="padding: 20px; text-align: center; color: var(--text-secondary);">
            –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: ${equityCurve[equityCurve.length - 1].toFixed(2)} USDT
        </div>`;
    }
}

function showTeacherHint() {
    const hints = [
        "üí° –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ",
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–±—ã—Ç–∫–æ–≤",
        "üí° –ù–µ —Ä–∏—Å–∫—É–π—Ç–µ –±–æ–ª–µ–µ 2% –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ",
        "üí° –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞",
        "üí° –°–ª–µ–¥–∏—Ç–µ –∑–∞ —É—Ä–æ–≤–Ω—è–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è",
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        "üí° –ù–µ –ø–æ–¥–¥–∞–≤–∞–π—Ç–µ—Å—å —ç–º–æ—Ü–∏—è–º - —Ç–æ—Ä–≥—É–π—Ç–µ –ø–æ –ø–ª–∞–Ω—É"
    ];
    
    const randomHint = hints[Math.floor(Math.random() * hints.length)];
    document.getElementById('teacher-message').textContent = randomHint;
}

function showTeacherAnalysis() {
    const latestCandle = currentData[currentData.length - 1];
    const prevCandle = currentData[currentData.length - 2];
    
    if (!latestCandle || !prevCandle) return;
    
    const change = ((latestCandle.close - prevCandle.close) / prevCandle.close) * 100;
    
    let analysis = `üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏:
    
–¶–µ–Ω–∞: ${latestCandle.close.toFixed(2)} USDT
–ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${change >= 0 ? '+' : ''}${change.toFixed(2)}%
–û–±—ä–µ–º: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã...

`;
    
    if (change > 2) {
        analysis += "üìà –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π –∏–º–ø—É–ª—å—Å. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –æ—Ç–∫–∞—Ç–µ.";
    } else if (change < -2) {
        analysis += "üìâ –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π –∏–º–ø—É–ª—å—Å. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –æ—Ç—Å–∫–æ–∫–µ.";
    } else {
        analysis += "‚û°Ô∏è –ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.";
    }
    
    analysis += "\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–æ—Ä–≥—É–π—Ç–µ –º–∞–ª—ã–º–∏ –æ–±—ä–µ–º–∞–º–∏.";
    
    document.getElementById('teacher-message').textContent = analysis;
}

function toggleTeacherLessons() {
    const lessonsDiv = document.getElementById('teacher-lessons');
    const isVisible = lessonsDiv.style.display === 'block';
    
    lessonsDiv.style.display = isVisible ? 'none' : 'block';
    document.getElementById('teacher-dictionary').style.display = 'none';
    document.getElementById('term-details').style.display = 'none';
}

function toggleTeacherDictionary() {
    const dictionaryDiv = document.getElementById('teacher-dictionary');
    const isVisible = dictionaryDiv.style.display === 'block';
    
    dictionaryDiv.style.display = isVisible ? 'none' : 'block';
    document.getElementById('teacher-lessons').style.display = 'none';
    document.getElementById('term-details').style.display = 'none';
}

function showLesson(lessonKey) {
    const lesson = teacherKnowledge.lessons[lessonKey];
    if (lesson) {
        document.getElementById('teacher-message').textContent = lesson.content;
        document.getElementById('teacher-lessons').style.display = 'none';
    }
}

function showTermDetails(termKey) {
    const term = teacherKnowledge.dictionary[termKey];
    if (term) {
        document.getElementById('term-title').textContent = term.title;
        document.getElementById('term-description').textContent = term.description;
        document.getElementById('term-details').style.display = 'block';
        document.getElementById('teacher-dictionary').style.display = 'none';
    }
}

function askTeacherQuestion() {
    const questionInput = document.getElementById('teacher-question');
    const question = questionInput.value.toLowerCase().trim();
    
    if (!question) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å', 'error');
        return;
    }
    
    let answer = null;
    
    // –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    for (const [key, value] of Object.entries(teacherKnowledge.questions)) {
        if (question.includes(key)) {
            answer = value;
            break;
        }
    }
    
    if (!answer) {
        answer = "–ü–æ–∫–∞ —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –æ—Å–Ω–æ–≤—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏.";
    }
    
    document.getElementById('teacher-message').textContent = `‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: ${question}\n\nüí° –û—Ç–≤–µ—Ç: ${answer}`;
    questionInput.value = '';
}

function calculateRisk() {
    const deposit = parseFloat(document.getElementById('risk-deposit').value);
    const riskPercent = parseFloat(document.getElementById('risk-percent').value);
    const entryPrice = parseFloat(document.getElementById('risk-entry').value);
    const stopPrice = parseFloat(document.getElementById('risk-stop').value);
    
    if (isNaN(deposit) || isNaN(riskPercent) || isNaN(entryPrice) || isNaN(stopPrice)) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'error');
        return;
    }
    
    if (entryPrice <= stopPrice) {
        showNotification('–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –¥–ª—è LONG', 'error');
        return;
    }
    
    const riskAmount = deposit * (riskPercent / 100);
    const priceDifference = entryPrice - stopPrice;
    const volume = riskAmount / priceDifference;
    const riskRewardRatio = 2; // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    
    document.getElementById('risk-volume').textContent = volume.toFixed(6);
    document.getElementById('risk-amount').textContent = riskAmount.toFixed(2) + ' USDT';
    document.getElementById('risk-profit').textContent = (riskAmount * riskRewardRatio).toFixed(2) + ' USDT';
    document.getElementById('risk-ratio').textContent = riskRewardRatio.toFixed(2);
}

function createOrder() {
    const orderType = document.getElementById('order-type').value;
    const price = parseFloat(document.getElementById('order-price').value);
    const amount = parseFloat(document.getElementById('order-amount').value);
    
    if (isNaN(price) || isNaN(amount) || price <= 0 || amount <= 0) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'error');
        return;
    }
    
    const order = {
        id: Date.now(),
        type: orderType,
        asset: currentAsset,
        price: price,
        amount: amount,
        timestamp: new Date().toLocaleString(),
        status: 'active'
    };
    
    activeOrders.push(order);
    updateOrdersDisplay();
    showNotification(`–û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: ${orderType}`, 'success');
    saveData();
}

function updateOrdersDisplay() {
    const ordersContainer = document.getElementById('orders-container');
    
    if (activeOrders.length === 0) {
        ordersContainer.innerHTML = '<div class="empty-orders">–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç</div>';
        return;
    }
    
    ordersContainer.innerHTML = activeOrders.map(order => `
        <div class="order-item">
            <div class="order-header">
                <span class="order-type">${getOrderTypeText(order.type)}</span>
                <span class="order-asset">${order.asset}</span>
                <button class="cancel-order" data-id="${order.id}">‚ùå</button>
            </div>
            <div class="order-details">
                <span>–¶–µ–Ω–∞: ${order.price.toFixed(2)}</span>
                <span>–û–±—ä–µ–º: ${order.amount.toFixed(6)}</span>
                <span>–°–æ–∑–¥–∞–Ω: ${order.timestamp}</span>
            </div>
        </div>
    `).join('');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–º–µ–Ω—ã
    document.querySelectorAll('.cancel-order').forEach(btn => {
        btn.addEventListener('click', function() {
            const orderId = parseInt(this.getAttribute('data-id'));
            cancelOrder(orderId);
        });
    });
}

function getOrderTypeText(type) {
    const types = {
        'STOP': 'üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å',
        'TAKE_PROFIT': 'üí∞ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç',
        'STOP_LIMIT': 'üéØ –°—Ç–æ–ø-–ª–∏–º–∏—Ç'
    };
    return types[type] || type;
}

function cancelOrder(orderId) {
    activeOrders = activeOrders.filter(order => order.id !== orderId);
    updateOrdersDisplay();
    showNotification('–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω', 'success');
    saveData();
}

function switchAnalysisTab(tabName) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.analysis-tab').forEach(tab => {
        tab.classList.remove('active');
        if (tab.getAttribute('data-tab') === tabName) {
            tab.classList.add('active');
        }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
        if (content.id === tabName + '-analysis') {
            content.classList.add('active');
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    updateAnalysisData(tabName);
}

function updateAnalysisData(tabName) {
    const latestCandle = currentData[currentData.length - 1];
    if (!latestCandle) return;
    
    switch (tabName) {
        case 'trend':
            updateTrendAnalysis(latestCandle);
            break;
        case 'volatility':
            updateVolatilityAnalysis(latestCandle);
            break;
        case 'support':
            updateSupportAnalysis(latestCandle);
            break;
        case 'sentiment':
            updateSentimentAnalysis(latestCandle);
            break;
    }
}

function updateTrendAnalysis(candle) {
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
    const recentCandles = currentData.slice(-10);
    const ups = recentCandles.filter(c => c.close > c.open).length;
    const downs = recentCandles.length - ups;
    
    document.getElementById('current-trend').textContent = ups > downs ? 'üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π' : downs > ups ? 'üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–π' : '‚û°Ô∏è –ë–æ–∫–æ–≤–æ–π';
    document.getElementById('current-trend').style.color = ups > downs ? 'var(--profit)' : downs > ups ? 'var(--loss)' : 'var(--text-secondary)';
    
    document.getElementById('trend-strength').textContent = Math.abs(ups - downs) >= 3 ? '–°–∏–ª—å–Ω—ã–π' : '–°–ª–∞–±—ã–π';
    document.getElementById('rsi-value').textContent = '50.0';
    document.getElementById('macd-value').textContent = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π';
    document.getElementById('adx-value').textContent = '25.0';
}

function updateVolatilityAnalysis(candle) {
    // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    const recentCandles = currentData.slice(-20);
    const highs = recentCandles.map(c => c.high);
    const lows = recentCandles.map(c => c.low);
    const maxHigh = Math.max(...highs);
    const minLow = Math.min(...lows);
    const volatility = ((maxHigh - minLow) / minLow) * 100;
    
    document.getElementById('atr-value').textContent = (volatility / 2).toFixed(2);
    document.getElementById('daily-volatility').textContent = volatility.toFixed(2) + '%';
    document.getElementById('std-dev').textContent = (volatility / 4).toFixed(2);
    document.getElementById('beta-value').textContent = '1.0';
}

function updateSupportAnalysis(candle) {
    // –ü—Ä–æ—Å—Ç—ã–µ —Ä–∞—Å—á–µ—Ç—ã —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    const recentCandles = currentData.slice(-50);
    const highs = recentCandles.map(c => c.high);
    const lows = recentCandles.map(c => c.low);
    
    const resistance = Math.max(...highs);
    const support = Math.min(...lows);
    const pivot = (resistance + support + candle.close) / 3;
    
    document.getElementById('resistance-level').textContent = resistance.toFixed(2);
    document.getElementById('support-level').textContent = support.toFixed(2);
    document.getElementById('pivot-level').textContent = pivot.toFixed(2);
    document.getElementById('r1-level').textContent = (pivot * 2 - support).toFixed(2);
    document.getElementById('s1-level').textContent = (pivot * 2 - resistance).toFixed(2);
}

function updateSentimentAnalysis(candle) {
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
    const change = ((candle.close - candle.open) / candle.open) * 100;
    
    let sentiment = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π';
    let sentimentColor = 'var(--text-secondary)';
    
    if (change > 2) {
        sentiment = '–ë—ã—á–∏–π';
        sentimentColor = 'var(--profit)';
    } else if (change < -2) {
        sentiment = '–ú–µ–¥–≤–µ–∂–∏–π';
        sentimentColor = 'var(--loss)';
    }
    
    document.getElementById('overall-sentiment').textContent = sentiment;
    document.getElementById('overall-sentiment').style.color = sentimentColor;
    document.getElementById('buyer-strength').textContent = change > 0 ? '–°–∏–ª—å–Ω–∞—è' : '–°–ª–∞–±–∞—è';
    document.getElementById('seller-strength').textContent = change < 0 ? '–°–∏–ª—å–Ω–∞—è' : '–°–ª–∞–±–∞—è';
    document.getElementById('sentiment-recommendation').textContent = 
        change > 1 ? '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∫—É–ø–∫—É' : change < -1 ? '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥–∞–∂—É' : '–û–∂–∏–¥–∞—Ç—å';
}

function filterHistory(filterType) {
    document.querySelectorAll('.history-filter').forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-filter') === filterType) {
            btn.classList.add('active');
        }
    });
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    updateTradeHistory(); // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
}

function filterSignals(signalType) {
    document.querySelectorAll('.signal-filter').forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-type') === signalType) {
            btn.classList.add('active');
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
    updateSignalsDisplay();
}

function updateSignalsDisplay() {
    const signalsList = document.getElementById('signals-list');
    
    if (tradingSignals.length === 0) {
        signalsList.innerHTML = '<div class="empty-signals">–°–∏–≥–Ω–∞–ª—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</div>';
        return;
    }
    
    // –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
    signalsList.innerHTML = tradingSignals.map(signal => `
        <div class="signal-item ${signal.type}">
            <div class="signal-icon">${signal.type === 'buy' ? 'üü¢' : signal.type === 'sell' ? 'üî¥' : '‚ö†Ô∏è'}</div>
            <div class="signal-content">
                <div class="signal-title">${signal.title}</div>
                <div class="signal-desc">${signal.description}</div>
                <div class="signal-time">${signal.timestamp}</div>
            </div>
        </div>
    `).join('');
}

function showDetailedStatistics() {
    const stats = `
–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${tradeHistory.length}
- –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${tradeHistory.filter(t => t.profit > 0).length}
- –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${tradeHistory.filter(t => t.profit < 0).length}
- –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${tradeHistory.length > 0 ? (tradeHistory.filter(t => t.profit > 0).length / tradeHistory.length * 100).toFixed(1) : 0}%
- –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${(equityCurve[equityCurve.length - 1] - 100).toFixed(2)} USDT
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: 0.00 USDT
    `;
    
    alert(stats);
}

// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const container = document.getElementById('notification-container');
    if (!container) return;
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <span class="notification-message">${message}</span>
        <button class="notification-close">√ó</button>
    `;
    
    container.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.opacity = '0';
            setTimeout(() => notification.remove(), 300);
        }
    }, 5000);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É
    notification.querySelector('.notification-close').addEventListener('click', function() {
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 300);
    });
}

// –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function saveData() {
    const data = {
        balance: balance,
        portfolio: portfolio,
        tradeHistory: tradeHistory,
        activeOrders: activeOrders,
        equityCurve: equityCurve,
        version: '1.0',
        lastUpdate: new Date().toISOString()
    };
    
    localStorage.setItem('tradelearn-data', JSON.stringify(data));
    updateDataInfo();
}

function loadSavedData() {
    const saved = localStorage.getItem('tradelearn-data');
    if (saved) {
        try {
            const data = JSON.parse(saved);
            balance = data.balance || 100.00;
            portfolio = data.portfolio || {};
            tradeHistory = data.tradeHistory || [];
            activeOrders = data.activeOrders || [];
            equityCurve = data.equityCurve || [100];
            
            updateBalance();
            updatePortfolio();
            updateTradeHistory();
            updateOrdersDisplay();
            updateStatistics();
            updateDataInfo();
            
            showNotification('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }
}

function exportData() {
    const data = {
        balance: balance,
        portfolio: portfolio,
        tradeHistory: tradeHistory,
        activeOrders: activeOrders,
        equityCurve: equityCurve,
        version: '1.0',
        exportDate: new Date().toISOString()
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `tradelearn-backup-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    showNotification('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
}

function importData(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const data = JSON.parse(e.target.result);
            
            if (confirm('–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏?')) {
                balance = data.balance || 100.00;
                portfolio = data.portfolio || {};
                tradeHistory = data.tradeHistory || [];
                activeOrders = data.activeOrders || [];
                equityCurve = data.equityCurve || [100];
                
                updateBalance();
                updatePortfolio();
                updateTradeHistory();
                updateOrdersDisplay();
                updateStatistics();
                saveData();
                
                showNotification('–î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
            showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    };
    reader.readAsText(file);
    event.target.value = ''; // –°–±—Ä–æ—Å input
}

function createBackup() {
    saveData();
    showNotification('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞', 'success');
}

function resetData() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
        localStorage.removeItem('tradelearn-data');
        balance = 100.00;
        portfolio = {};
        tradeHistory = [];
        activeOrders = [];
        equityCurve = [100];
        
        updateBalance();
        updatePortfolio();
        updateTradeHistory();
        updateOrdersDisplay();
        updateStatistics();
        
        showNotification('–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã', 'success');
    }
}

function updateDataInfo() {
    const saved = localStorage.getItem('tradelearn-data');
    const size = saved ? (new Blob([saved]).size / 1024).toFixed(2) : '0';
    const lastUpdate = saved ? new Date(JSON.parse(saved).lastUpdate).toLocaleString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    document.getElementById('data-size').textContent = size + ' KB';
    document.getElementById('last-update').textContent = lastUpdate;
}

function loadInitialData() {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    updateBalance();
    updatePortfolio();
    updateTradeHistory();
    updateOrdersDisplay();
    updateStatistics();
    updateDataInfo();
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä—ã–Ω–∫—É
    setTimeout(() => {
        document.getElementById('connection-status').textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
        document.getElementById('connection-status').style.color = 'var(--profit)';
    }, 2000);
}

// –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
const notificationStyles = `
.notification {
    position: fixed;
    top: 20px;
    right: 20px;
    background: var(--surface);
    border-left: 4px solid var(--primary);
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    display: flex;
    align-items: center;
    gap: 10px;
    max-width: 300px;
    z-index: 1000;
    animation: slideIn 0.3s ease;
    transition: opacity 0.3s ease;
}

.notification.success {
    border-left-color: var(--profit);
}

.notification.error {
    border-left-color: var(--loss);
}

.notification.warning {
    border-left-color: var(--warning);
}

.notification-close {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    font-size: 18px;
    padding: 0;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.notification-close:hover {
    color: var(--text);
}

@keyframes slideIn {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
const styleSheet = document.createElement('style');
styleSheet.textContent = notificationStyles;
document.head.appendChild(styleSheet);
