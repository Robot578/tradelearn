// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let chart;
let candleSeries;
let smaSeries;
let emaSeries;
let rsiSeries;
let volumeSeries;
let currentData = [];
let balance = 100.00;
let portfolio = {
    'BTC': 0,
    'ETH': 0, 
    'SOL': 0,
    'ADA': 0,
    'DOT': 0,
    'BNB': 0,
    'XRP': 0,
    'DOGE': 0
};
let tradeHistory = [];
let activeOrders = [];
let currentAsset = 'BTCUSDT';
let currentTimeframe = '1h';
let indicators = {
    sma: true,
    ema: false,
    rsi: false,
    macd: false,
    bollinger: false
};
let wsConnection = null;
let marketData = {};
let tradingSignals = [];
let equityCurve = [100];

// –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—á–∏—Ç–µ–ª—è
const teacherKnowledge = {
    questions: {
        '—á—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–µ–π–¥–∏–Ω–≥': '–¢—Ä–µ–π–¥–∏–Ω–≥ - —ç—Ç–æ —Ç–æ—Ä–≥–æ–≤–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ —Å —Ü–µ–ª—å—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Ö —Ü–µ–Ω—ã.',
        '–∫–∞–∫ –Ω–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å': '–ù–∞—á–Ω–∏—Ç–µ —Å –∏–∑—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤, –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–µ–º–æ-—Å—á–µ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ —Ç–æ—Ä–≥—É–π—Ç–µ –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏–µ —Å—É–º–º—ã.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–æ–ø –ª–æ—Å—Å': '–°—Ç–æ–ø-–ª–æ—Å—Å - —ç—Ç–æ –æ—Ä–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —É–±—ã—Ç–∫–∞.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ —Ç–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç': '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç - —ç—Ç–æ –æ—Ä–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–±—ã–ª–∏.',
        '–∫–∞–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: –∏–∑—É—á–∞–π—Ç–µ —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ –±—ã—á–∏–π —Ä—ã–Ω–æ–∫': '–ë—ã—á–∏–π —Ä—ã–Ω–æ–∫ - —ç—Ç–æ –ø–µ—Ä–∏–æ–¥ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω, –∫–æ–≥–¥–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ –º–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫': '–ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ - —ç—Ç–æ –ø–µ—Ä–∏–æ–¥ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω, –∫–æ–≥–¥–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω–æ.',
        '–∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∏—Å–∫–∞–º–∏': '–†–∏—Å–∫—É–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 1-2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è': '–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è - —ç—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤.',
        '–∫–∞–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å': '–ù–∞—á–Ω–∏—Ç–µ —Å SMA, EMA, RSI –∏ MACD. –ö–∞–∂–¥—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ leverage': '–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏ –ø—Ä–∏ –º–µ–Ω—å—à–µ–º –¥–µ–ø–æ–∑–∏—Ç–µ, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∏—Å–∫–∏.',
        '–∫–∞–∫ —á–∏—Ç–∞—Ç—å —Å–≤–µ—á–∏': '–Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ü–µ–Ω—É –æ—Ç–∫—Ä—ã—Ç–∏—è, –∑–∞–∫—Ä—ã—Ç–∏—è, –º–∞–∫—Å–∏–º—É–º –∏ –º–∏–Ω–∏–º—É–º –∑–∞ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏.'
    },

    lessons: {
        'basics': {
            title: 'üìñ –û—Å–Ω–æ–≤—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞',
            content: `–¢—Ä–µ–π–¥–∏–Ω–≥ - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ buying low and selling high (–ø–æ–∫—É–ø–∞—Ç—å –¥–µ—à–µ–≤–æ, –ø—Ä–æ–¥–∞–≤–∞—Ç—å –¥–æ—Ä–æ–≥–æ). 
            
–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è:
‚Ä¢ Long (–ª–æ–Ω–≥) - –ø–æ–∫—É–ø–∫–∞ –∞–∫—Ç–∏–≤–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã
‚Ä¢ Short (—à–æ—Ä—Ç) - –ø—Ä–æ–¥–∞–∂–∞ –∞–∫—Ç–∏–≤–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã  
‚Ä¢ Spread (—Å–ø—Ä–µ–¥) - —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏
‚Ä¢ Volume (–æ–±—ä–µ–º) - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
‚Ä¢ Liquidity (–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å) - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å –∞–∫—Ç–∏–≤

–í–∞–∂–Ω–æ: –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–∏—Å–∫—É–π—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ—Ç–µ—Ä—è—Ç—å!`
        },
        'candles': {
            title: 'üïØÔ∏è –°–≤–µ—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑',
            content: `–Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ü–µ–Ω—É –æ—Ç–∫—Ä—ã—Ç–∏—è, –∑–∞–∫—Ä—ã—Ç–∏—è, –º–∞–∫—Å–∏–º—É–º –∏ –º–∏–Ω–∏–º—É–º –∑–∞ –ø–µ—Ä–∏–æ–¥.

–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:
‚Ä¢ –ë—ã—á—å—è —Å–≤–µ—á–∞ - –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—ã—à–µ –æ—Ç–∫—Ä—ã—Ç–∏—è (–æ–±—ã—á–Ω–æ –∑–µ–ª–µ–Ω–∞—è)
‚Ä¢ –ú–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞ - –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–∏–∂–µ –æ—Ç–∫—Ä—ã—Ç–∏—è (–æ–±—ã—á–Ω–æ –∫—Ä–∞—Å–Ω–∞—è)  
‚Ä¢ –î–æ–¥–∂–∏ - –º–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ, –Ω–µ—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞
‚Ä¢ –ú–æ–ª–æ—Ç - –±—ã—á–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
‚Ä¢ –ü–æ–≤–µ—à–µ–Ω–Ω—ã–π - –º–µ–¥–≤–µ–∂–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
‚Ä¢ –ü–æ–≥–ª–æ—â–µ–Ω–∏–µ - –±–æ–ª—å—à–∞—è —Å–≤–µ—á–∞ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–µ—á–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç—Ä–µ–Ω–¥–∞!`
        },
        'indicators': {
            title: 'üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã',
            content: `–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–º–æ–≥–∞—é—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞.

–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:
‚Ä¢ SMA (Simple Moving Average) - –ø—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
‚Ä¢ EMA (Exponential Moving Average) - —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è  
‚Ä¢ RSI (Relative Strength Index) - –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã
‚Ä¢ MACD (Moving Average Convergence Divergence) - —Å—Ö–æ–∂–¥–µ–Ω–∏–µ/—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
‚Ä¢ Bollinger Bands - –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - —ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –ø—É—Ç–∞–Ω–∏—Ü—É!`
        },
        'risk': {
            title: 'üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏',
            content: `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ - –∫–ª—é—á –∫ —É—Å–ø–µ—à–Ω–æ–º—É —Ç—Ä–µ–π–¥–∏–Ω–≥—É!

–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
‚Ä¢ –†–∏—Å–∫—É–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 1-2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
‚Ä¢ –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å
‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1:2
‚Ä¢ –í–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —ç–º–æ—Ü–∏–∏ - –∂–∞–¥–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–∞—Ö –≥–ª–∞–≤–Ω—ã–µ –≤—Ä–∞–≥–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞

–ü–æ–º–Ω–∏—Ç–µ: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª –≤–∞–∂–Ω–µ–µ, —á–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å!`
        },
        'macd': {
            title: 'üìà MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä',
            content: `MACD (Moving Average Convergence Divergence) - —Ç—Ä–µ–Ω–¥–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä.

–°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ:
‚Ä¢ MACD –ª–∏–Ω–∏—è - —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É EMA 12 –∏ EMA 26
‚Ä¢ –°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è - EMA 9 –æ—Ç MACD
‚Ä¢ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ - —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É MACD –∏ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–µ–π

–°–∏–≥–Ω–∞–ª—ã:
‚Ä¢ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π - –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª
‚Ä¢ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π - –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª
‚Ä¢ –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è - —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MACD –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏.`
        },
        'bollinger': {
            title: 'üìä –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞',
            content: `–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞.

–°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ:
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è - SMA 20
‚Ä¢ –í–µ—Ä—Ö–Ω—è—è –ø–æ–ª–æ—Å–∞ - SMA 20 + (2 √ó —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
‚Ä¢ –ù–∏–∂–Ω—è—è –ø–æ–ª–æ—Å–∞ - SMA 20 - (2 √ó —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)

–°–∏–≥–Ω–∞–ª—ã:
‚Ä¢ –°—É–∂–µ–Ω–∏–µ –ø–æ–ª–æ—Å - –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–µ–Ω –ø—Ä–æ–±–æ–π
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–ª–æ—Å - –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –ö–∞—Å–∞–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã - –≤–æ–∑–º–æ–∂–Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
‚Ä¢ –ö–∞—Å–∞–Ω–∏–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã - –≤–æ–∑–º–æ–∂–Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
‚Ä¢ –û—Ç—Å–∫–æ–∫ –æ—Ç –ø–æ–ª–æ—Å - —Ç–æ—Ä–≥–æ–≤–ª—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ

–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –±–æ–∫–æ–≤–æ–º —Ç—Ä–µ–Ω–¥–µ.`
        }
    },

    dictionary: {
        'sma': {
            title: 'SMA (Simple Moving Average)',
            description: '–ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –°–≥–ª–∞–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω–æ–≤—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –∏ –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥. –ß–µ–º –¥–ª–∏–Ω–Ω–µ–µ –ø–µ—Ä–∏–æ–¥, —Ç–µ–º –±–æ–ª–µ–µ —Å–≥–ª–∞–∂–µ–Ω–Ω–æ–π –±—É–¥–µ—Ç –ª–∏–Ω–∏—è.'
        },
        'ema': {
            title: 'EMA (Exponential Moving Average)',
            description: '–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è - –ø–æ—Ö–æ–∂–∞ –Ω–∞ SMA, –Ω–æ –ø—Ä–∏–¥–∞–µ—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ü–µ–Ω–∞–º, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–µ –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫ –Ω–µ–¥–∞–≤–Ω–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ü–µ–Ω—ã. –ë—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ü–µ–Ω–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è.'
        },
        'rsi': {
            title: 'RSI (Relative Strength Index)',
            description: '–ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã - –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä, –∏–∑–º–µ—Ä—è—é—â–∏–π —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π. –ó–Ω–∞—á–µ–Ω–∏—è –≤—ã—à–µ 70 —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å, –Ω–∏–∂–µ 30 - –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å. –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è RSI —Å —Ü–µ–Ω–æ–π –º–æ–∂–µ—Ç —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ.'
        },
        'macd': {
            title: 'MACD (Moving Average Convergence Divergence)',
            description: '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É –¥–≤—É–º—è —Å–∫–æ–ª—å–∑—è—â–∏–º–∏ —Å—Ä–µ–¥–Ω–∏–º–∏. –ü–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–º–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞. –°–æ—Å—Ç–æ–∏—Ç –∏–∑ MACD –ª–∏–Ω–∏–∏, —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã. –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ª–∏–Ω–∏–π –¥–∞—é—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã.'
        },
        'bollinger': {
            title: '–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ (Bollinger Bands)',
            description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Ç—Ä–µ—Ö –ª–∏–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è. –®–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ - —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—É–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–π.'
        },
        'stoploss': {
            title: 'Stop-Loss (–°—Ç–æ–ø-–õ–æ—Å—Å)',
            description: '–û—Ä–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —É–±—ã—Ç–∫–∞. –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –±–æ–ª—å—à–∏—Ö –ø–æ—Ç–µ—Ä—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ —É—Ä–æ–≤–Ω–µ 1-2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞.'
        },
        'takeprofit': {
            title: 'Take-Profit (–¢–µ–π–∫-–ü—Ä–æ—Ñ–∏—Ç)',
            description: '–û—Ä–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–±—ã–ª–∏. –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å. –û–±—ã—á–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ, –≥–¥–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1:2 –∏–ª–∏ –±–æ–ª–µ–µ.'
        },
        'leverage': {
            title: '–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ (Leverage)',
            description: '–¢–æ—Ä–≥–æ–≤–ª—è —Å –∑–∞–µ–º–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –±–æ–ª—å—à–µ–≥–æ –æ–±—ä–µ–º–∞ –ø—Ä–∏ –º–µ–Ω—å—à–µ–º –¥–µ–ø–æ–∑–∏—Ç–µ. –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–∞–∫ –ø—Ä–∏–±—ã–ª—å, —Ç–∞–∫ –∏ —É–±—ã—Ç–∫–∏. –¢—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏.'
        },
        'bullmarket': {
            title: '–ë—ã—á–∏–π —Ä—ã–Ω–æ–∫ (Bull Market)',
            description: '–ü–µ—Ä–∏–æ–¥ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ, –∫–æ–≥–¥–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –∏ –æ–∂–∏–¥–∞—é—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è —Ü–µ–Ω. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤–æ—Å—Ö–æ–¥—è—â–∏–º —Ç—Ä–µ–Ω–¥–æ–º, –≤—ã—Å–æ–∫–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏ –ø–æ–∫—É–ø–æ–∫ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏.'
        },
        'bearmarket': {
            title: '–ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ (Bear Market)',
            description: '–ü–µ—Ä–∏–æ–¥ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ, –∫–æ–≥–¥–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω–æ –∏ –æ–∂–∏–¥–∞—é—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –Ω–∏—Å—Ö–æ–¥—è—â–∏–º —Ç—Ä–µ–Ω–¥–æ–º, –≤—ã—Å–æ–∫–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏ –ø—Ä–æ–¥–∞–∂ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏.'
        },
        'atr': {
            title: 'ATR (Average True Range)',
            description: '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞. –í—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ATR —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—ã—Å–æ–∫—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å.'
        },
        'divergence': {
            title: '–î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è',
            description: '–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞, —á–∞—Å—Ç–æ –ø—Ä–µ–¥–≤–µ—â–∞—é—â–µ–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ç—Ä–µ–Ω–¥–∞. –ë—ã—á—å—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è –≤–æ–∑–Ω–∏–∫–∞–µ—Ç, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –¥–µ–ª–∞–µ—Ç –Ω–æ–≤—ã–µ –º–∏–Ω–∏–º—É–º—ã, –∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä - –Ω–µ—Ç. –ú–µ–¥–≤–µ–∂—å—è - –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –¥–µ–ª–∞–µ—Ç –Ω–æ–≤—ã–µ –º–∞–∫—Å–∏–º—É–º—ã, –∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä - –Ω–µ—Ç.'
        }
    },

    getSmartAnswer: function(question) {
        question = question.toLowerCase();
        
        if (question.includes('–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å') && question.includes('–∞–∫—Ç–∏–≤')) {
            return "–í—ã–±–∏—Ä–∞–π—Ç–µ –∞–∫—Ç–∏–≤—ã —Å —Ö–æ—Ä–æ—à–∏–º –æ–±—ä–µ–º–æ–º —Ç–æ—Ä–≥–æ–≤, –∏–∑—É—á–∞–π—Ç–µ –∏—Ö —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏. –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (BTC, ETH) - –æ–Ω–∏ –º–µ–Ω–µ–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã.";
        }
        
        if (question.includes('–ª—É—á—à–µ–µ –≤—Ä–µ–º—è') && question.includes('—Ç–æ—Ä–≥')) {
            return "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∞. –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —á–∞—Å—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –Ω–æ –Ω–∞–∏–±–æ–ª—å—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–π –∏ –∞–∑–∏–∞—Ç—Å–∫–æ–π —Å–µ—Å—Å–∏–π (14:00-22:00 UTC).";
        }
        
        if (question.includes('—Å–∫–æ–ª—å–∫–æ') && question.includes('–∑–∞—Ä–∞–±–∞—Ç')) {
            return "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–Ω–æ–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤: –≤–∞—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —Ä–∏—Å–∫–∞, —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. –†–µ–∞–ª—å–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö: 5-20% –≤ –º–µ—Å—è—Ü –ø—Ä–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ. –ü–æ–º–Ω–∏—Ç–µ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –≤–∞–∂–Ω–µ–µ –≤—ã—Å–æ–∫–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏!";
        }
        
        if (question.includes('–Ω–æ–≤–∏—á–∫')) {
            return "–ù–æ–≤–∏—á–∫–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥—É—é: 1) –ò–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã 2) –¢–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ 3) –ù–∞—á–∞—Ç—å —Å –º–∞–ª–µ–Ω—å–∫–∏—Ö —Å—É–º–º 4) –§–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏, –∞ –Ω–µ –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–µ 5) –í–µ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª 6) –ù–µ —Ä–∏—Å–∫–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ 1-2% –Ω–∞ —Å–¥–µ–ª–∫—É";
        }
        
        if (question.includes('–æ—à–∏–±–∫') && question.includes('–Ω–∞—á–∏–Ω–∞')) {
            return "–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –Ω–æ–≤–∏—á–∫–æ–≤: 1) –¢–æ—Ä–≥–æ–≤–ª—è –±–µ–∑ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ 2) –ò–∑–ª–∏—à–Ω–∏–π —Ä–∏—Å–∫ 3) –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è 4) –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ 5) –ü–æ–≥–æ–Ω—è –∑–∞ —É–±—ã—Ç–∫–∞–º–∏ 6) –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥ 7) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞";
        }

        if (question.includes('—Å—Ç—Ä–∞—Ç–µ–≥–∏')) {
            return "–õ—É—á—à–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö: 1) –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥—É 2) –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è 3) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (SMA, RSI). –ù–∞—á–Ω–∏—Ç–µ —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–π—Ç–µ –µ–µ –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–º–∞.";
        }

        if (question.includes('—ç–º–æ—Ü–∏')) {
            return "–≠–º–æ—Ü–∏–∏ - –≥–ª–∞–≤–Ω—ã–π –≤—Ä–∞–≥ —Ç—Ä–µ–π–¥–µ—Ä–∞! –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ: 1) –ñ–∞–¥–Ω–æ—Å—Ç—å - –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Ä–∏—Å–∫ 2) –°—Ç—Ä–∞—Ö - —Å–ª–µ–¥—É–π—Ç–µ –ø–ª–∞–Ω—É 3) –ù–∞–¥–µ–∂–¥–∞ - –Ω–µ –¥–µ—Ä–∂–∏—Ç–µ —É–±—ã—Ç–æ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ 4) –ü–∞–Ω–∏–∫–∞ - –Ω–µ —Å–æ–≤–µ—Ä—à–∞–π—Ç–µ –∏–º–ø—É–ª—å—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É!";
        }
        
        return "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å —ç—Ç—É —Ç–µ–º—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–£—Ä–æ–∫–∏' –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ. –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö, —Ä–∏—Å–∫–∞—Ö, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö –∏–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞.";
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupEventListeners();
    initializeWebSocket();
    loadChartData();
    updateUI();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initializeApp() {
    loadFromLocalStorage();
    initializeChart();
    
    const savedIndicators = localStorage.getItem('tradelearn_indicators');
    if (savedIndicators) {
        indicators = {...indicators, ...JSON.parse(savedIndicators)};
        updateIndicatorCheckboxes();
    }
    
    updateUI();
    updateDataInfo();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const section = e.currentTarget.dataset.section;
            showSection(section);
        });
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ–∫—Ü–∏–π
    document.querySelectorAll('.close-section').forEach(btn => {
        btn.addEventListener('click', () => {
            hideAllSections();
        });
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∞–π–¥–±–∞—Ä–∞
    document.getElementById('sidebar-toggle').addEventListener('click', toggleSidebar);
    
    // –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞
    document.getElementById('asset-select').addEventListener('change', (e) => {
        switchAsset(e.target.value);
    });
    
    // –¢–∞–π–º—Ñ—Ä–µ–π–º—ã
    document.querySelectorAll('.timeframe-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            document.querySelectorAll('.timeframe-btn').forEach(b => b.classList.remove('active'));
            e.currentTarget.classList.add('active');
            switchTimeframe(e.currentTarget.dataset.tf);
        });
    });
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    document.getElementById('sma-toggle').addEventListener('change', toggleIndicator);
    document.getElementById('ema-toggle').addEventListener('change', toggleIndicator);
    document.getElementById('rsi-toggle').addEventListener('change', toggleIndicator);
    document.getElementById('macd-toggle').addEventListener('change', toggleIndicator);
    document.getElementById('bollinger-toggle').addEventListener('change', toggleIndicator);
    
    // –¢–æ—Ä–≥–æ–≤–ª—è
    document.getElementById('buy-btn').addEventListener('click', () => executeTrade('buy'));
    document.getElementById('sell-btn').addEventListener('click', () => executeTrade('sell'));
    document.getElementById('buy-max-btn').addEventListener('click', buyMax);
    
    // –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.quick-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const percent = parseInt(e.target.dataset.percent);
            setTradeAmountByPercent(percent);
        });
    });
    
    // –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ
    document.getElementById('order-type-select').addEventListener('change', (e) => {
        const limitGroup = document.getElementById('limit-price-group');
        limitGroup.style.display = e.target.value === 'limit' ? 'block' : 'none';
    });
    
    // –†–∏—Å–∫ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
    document.getElementById('calculate-risk').addEventListener('click', calculateRisk);
    
    // –£—á–∏—Ç–µ–ª—å
    document.getElementById('teacher-hint').addEventListener('click', showTeacherHint);
    document.getElementById('teacher-analysis').addEventListener('click', showTeacherAnalysis);
    document.getElementById('teacher-lesson').addEventListener('click', showTeacherLesson);
    document.getElementById('teacher-dictionary-btn').addEventListener('click', toggleDictionary);
    document.getElementById('ask-question').addEventListener('click', answerQuestion);
    document.getElementById('teacher-question').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') answerQuestion();
    });
    document.getElementById('close-term').addEventListener('click', () => {
        document.getElementById('term-details').style.display = 'none';
    });
    
    // –£—á–∏—Ç–µ–ª—å - —É—Ä–æ–∫–∏
    document.querySelectorAll('.lesson-card').forEach(card => {
        card.addEventListener('click', (e) => {
            const lessonId = e.currentTarget.dataset.lesson;
            showLesson(lessonId);
        });
    });
    
    // –£—á–∏—Ç–µ–ª—å - —Å–ª–æ–≤–∞—Ä—å
    document.querySelectorAll('.dictionary-term').forEach(term => {
        term.addEventListener('click', (e) => {
            const termId = e.currentTarget.dataset.term;
            showTermDefinition(termId);
        });
    });
    
    // –î–∞–Ω–Ω—ã–µ
    document.getElementById('export-btn').addEventListener('click', exportData);
    document.getElementById('import-btn').addEventListener('click', () => document.getElementById('import-file').click());
    document.getElementById('import-file').addEventListener('change', importData);
    document.getElementById('backup-btn').addEventListener('click', createBackup);
    document.getElementById('reset-btn').addEventListener('click', resetData);
    
    // –û—Ä–¥–µ—Ä–∞
    document.getElementById('create-order-btn').addEventListener('click', createOrder);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–º
    document.getElementById('auto-scale-btn').addEventListener('click', autoScaleChart);
    document.getElementById('reset-chart-btn').addEventListener('click', resetChart);
    
    // –§–∏–ª—å—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–æ–≤
    document.querySelectorAll('.signal-filter').forEach(btn => {
        btn.addEventListener('click', (e) => {
            document.querySelectorAll('.signal-filter').forEach(b => b.classList.remove('active'));
            e.target.classList.add('active');
            updateSignalsList([]);
        });
    });
    
    // –í–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    document.querySelectorAll('.analysis-tab').forEach(tab => {
        tab.addEventListener('click', (e) => {
            const tabName = e.target.dataset.tab;
            document.querySelectorAll('.analysis-tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
            e.target.classList.add('active');
            document.getElementById(`${tabName}-analysis`).classList.add('active');
        });
    });
    
    // –§–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏
    document.querySelectorAll('.history-filter').forEach(filter => {
        filter.addEventListener('click', (e) => {
            document.querySelectorAll('.history-filter').forEach(f => f.classList.remove('active'));
            e.target.classList.add('active');
            updateHistoryList();
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function initializeWebSocket() {
    updateConnectionStatus('connecting');
    
    try {
        const symbol = currentAsset.toLowerCase();
        wsConnection = new WebSocket(`wss://stream.binance.com:9443/ws/${symbol}@kline_${currentTimeframe}`);
        
        wsConnection.onopen = function() {
            updateConnectionStatus('connected');
            showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ', '–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Binance –ø–æ–¥–∫–ª—é—á–µ–Ω—ã', 'success');
        };
        
        wsConnection.onmessage = function(event) {
            const data = JSON.parse(event.data);
            processRealTimeData(data);
        };
        
        wsConnection.onerror = function(error) {
            console.error('WebSocket error:', error);
            updateConnectionStatus('error');
            showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'error');
        };
        
        wsConnection.onclose = function() {
            updateConnectionStatus('disconnected');
            setTimeout(initializeWebSocket, 5000);
        };
        
    } catch (error) {
        console.error('WebSocket initialization failed:', error);
        updateConnectionStatus('error');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function processRealTimeData(data) {
    const kline = data.k;
    const newCandle = {
        time: Math.floor(kline.t / 1000),
        open: parseFloat(kline.o),
        high: parseFloat(kline.h),
        low: parseFloat(kline.l),
        close: parseFloat(kline.c),
        volume: parseFloat(kline.v)
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
    updateCurrentPrice(newCandle);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateMarketStats(data);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
    analyzeMarketData(newCandle);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function updateConnectionStatus(status) {
    const statusElement = document.getElementById('connection-status');
    statusElement.textContent = getStatusText(status);
    statusElement.className = `connection-status ${status}`;
}

function getStatusText(status) {
    const statusMap = {
        'connected': '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Binance',
        'connecting': 'üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...',
        'disconnected': '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ',
        'error': '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
    };
    return statusMap[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance
async function loadChartData() {
    showLoading();
    
    try {
        let data;
        
        try {
            data = await fetchHistoricalData();
        } catch (error) {
            console.warn('Real data unavailable, using simulated data:', error);
            data = await simulateChartData();
        }
        
        currentData = data;
        candleSeries.setData(data);
        updateCurrentPrice(data[data.length - 1]);
        calculateIndicators(data);
        analyzeMarketData(data[data.length - 1]);
        
    } catch (error) {
        console.error('Chart data loading error:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞');
    } finally {
        hideLoading();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance API
async function fetchHistoricalData() {
    const timeframeMap = {
        '1m': '1m', '5m': '5m', '15m': '15m',
        '1h': '1h', '4h': '4h', '1d': '1d', '1w': '1w'
    };
    
    const interval = timeframeMap[currentTimeframe] || '1h';
    const limit = 500;
    
    const response = await fetch(
        `https://api.binance.com/api/v3/klines?symbol=${currentAsset}&interval=${interval}&limit=${limit}`
    );
    
    if (!response.ok) {
        throw new Error('Binance API error');
    }
    
    const klines = await response.json();
    
    return klines.map(k => ({
        time: Math.floor(k[0] / 1000),
        open: parseFloat(k[1]),
        high: parseFloat(k[2]),
        low: parseFloat(k[3]),
        close: parseFloat(k[4]),
        volume: parseFloat(k[5])
    }));
}

// –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
async function simulateChartData() {
    return new Promise(resolve => {
        setTimeout(() => {
            const now = Date.now();
            const data = [];
            let price = currentAsset.includes('BTC') ? 50000 : 
                       currentAsset.includes('ETH') ? 3000 :
                       currentAsset.includes('SOL') ? 100 :
                       currentAsset.includes('ADA') ? 0.5 :
                       currentAsset.includes('DOT') ? 7 :
                       currentAsset.includes('BNB') ? 600 :
                       currentAsset.includes('XRP') ? 0.6 : 0.1;
            
            for (let i = 100; i > 0; i--) {
                const time = now - i * 3600000;
                const open = price;
                const change = (Math.random() - 0.5) * (price * 0.02);
                price = price + change;
                const high = Math.max(open, price) + Math.random() * (price * 0.01);
                const low = Math.min(open, price) - Math.random() * (price * 0.01);
                const close = price;
                
                data.push({
                    time: Math.floor(time / 1000),
                    open: open,
                    high: high,
                    low: low,
                    close: close,
                    volume: Math.random() * 1000
                });
            }
            resolve(data);
        }, 1000);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
function initializeChart() {
    const chartContainer = document.getElementById('candleChart');
    
    chart = LightweightCharts.createChart(chartContainer, {
        layout: {
            background: { color: '#121212' },
            textColor: 'rgba(255, 255, 255, 0.9)',
        },
        grid: {
            vertLines: { color: 'rgba(42, 46, 57, 0.5)' },
            horzLines: { color: 'rgba(42, 46, 57, 0.5)' },
        },
        timeScale: {
            timeVisible: true,
            secondsVisible: false,
            borderColor: 'rgba(197, 203, 206, 0.4)',
        },
        crosshair: {
            mode: LightweightCharts.CrosshairMode.Normal,
        },
        width: chartContainer.clientWidth,
        height: chartContainer.clientHeight,
    });
    
    // –°–≤–µ—á–Ω–∞—è —Å–µ—Ä–∏—è
    candleSeries = chart.addCandlestickSeries({
        upColor: '#00c853',
        downColor: '#ff5252',
        borderDownColor: '#ff5252',
        borderUpColor: '#00c853',
        wickDownColor: '#ff5252',
        wickUpColor: '#00c853',
    });
    
    // SMA
    smaSeries = chart.addLineSeries({
        color: '#2962ff',
        lineWidth: 2,
        title: 'SMA 20',
    });
    
    // EMA
    emaSeries = chart.addLineSeries({
        color: '#ff6d00',
        lineWidth: 2,
        title: 'EMA 12',
    });
    
    // RSI
    rsiSeries = chart.addLineSeries({
        color: '#9c27b0',
        lineWidth: 1,
        title: 'RSI',
        priceScaleId: 'rsi',
    });
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∫–∞–ª—ã –¥–ª—è RSI
    chart.priceScale('rsi').applyOptions({
        scaleMargins: {
            top: 0.8,
            bottom: 0.1,
        }
    });
    
    // –û–±—ä–µ–º—ã
    volumeSeries = chart.addHistogramSeries({
        color: '#26a69a',
        priceFormat: {
            type: 'volume',
        },
        priceScaleId: 'volume',
    });
    
    chart.priceScale('volume').applyOptions({
        scaleMargins: {
            top: 0.8,
            bottom: 0,
        },
    });
    
    // –ü–æ–¥—Å–∫–∞–∑–∫–∞
    chart.subscribeCrosshairMove(param => {
        if (!param.point) return;
        
        const data = param.seriesData.get(candleSeries);
        if (data) {
            showTooltip(param.point.x, param.point.y, data);
        } else {
            hideTooltip();
        }
    });
    
    // –†–µ—Å–∞–π–∑
    new ResizeObserver(entries => {
        if (entries.length === 0) return;
        const { width, height } = entries[0].contentRect;
        chart.applyOptions({ width, height });
    }).observe(chartContainer);
}

// –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
function calculateIndicators(data) {
    // SMA 20
    if (indicators.sma) {
        const smaData = calculateSMA(data, 20);
        smaSeries.setData(smaData);
    }
    
    // EMA 12
    if (indicators.ema) {
        const emaData = calculateEMA(data, 12);
        emaSeries.setData(emaData);
    }
    
    // RSI 14
    if (indicators.rsi) {
        const rsiData = calculateRSI(data, 14);
        rsiSeries.setData(rsiData);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
    updateIndicatorsVisibility();
}

// –†–∞—Å—á–µ—Ç SMA
function calculateSMA(data, period) {
    const result = [];
    for (let i = period - 1; i < data.length; i++) {
        let sum = 0;
        for (let j = 0; j < period; j++) {
            sum += data[i - j].close;
        }
        result.push({
            time: data[i].time,
            value: sum / period
        });
    }
    return result;
}

// –†–∞—Å—á–µ—Ç EMA
function calculateEMA(data, period) {
    const result = [];
    const k = 2 / (period + 1);
    let ema = data[0].close;
    
    result.push({
        time: data[0].time,
        value: ema
    });
    
    for (let i = 1; i < data.length; i++) {
        ema = (data[i].close - ema) * k + ema;
        result.push({
            time: data[i].time,
            value: ema
        });
    }
    return result;
}

// –†–∞—Å—á–µ—Ç RSI
function calculateRSI(data, period) {
    const result = [];
    let gains = 0;
    let losses = 0;
    
    for (let i = 1; i <= period; i++) {
        const change = data[i].close - data[i - 1].close;
        if (change >= 0) {
            gains += change;
        } else {
            losses += Math.abs(change);
        }
    }
    
    let avgGain = gains / period;
    let avgLoss = losses / period;
    
    for (let i = period + 1; i < data.length; i++) {
        const change = data[i].close - data[i - 1].close;
        let currentGain = 0;
        let currentLoss = 0;
        
        if (change >= 0) {
            currentGain = change;
        } else {
            currentLoss = Math.abs(change);
        }
        
        avgGain = (avgGain * (period - 1) + currentGain) / period;
        avgLoss = (avgLoss * (period - 1) + currentLoss) / period;
        
        const rs = avgGain / (avgLoss === 0 ? 1 : avgLoss);
        const rsi = 100 - (100 / (1 + rs));
        
        result.push({
            time: data[i].time,
            value: rsi
        });
    }
    
    return result;
}

// –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
function updateIndicatorsVisibility() {
    smaSeries.applyOptions({
        visible: indicators.sma
    });
    
    emaSeries.applyOptions({
        visible: indicators.ema
    });
    
    rsiSeries.applyOptions({
        visible: indicators.rsi
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
function toggleIndicator(e) {
    const indicator = e.target.id.replace('-toggle', '');
    indicators[indicator] = e.target.checked;
    
    if (currentData.length > 0) {
        calculateIndicators(currentData);
    }
    saveIndicatorsToLocalStorage();
}

// –û–±–Ω–æ–≤–∏—Ç—å —á–µ–∫–±–æ–∫—Å—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
function updateIndicatorCheckboxes() {
    document.getElementById('sma-toggle').checked = indicators.sma;
    document.getElementById('ema-toggle').checked = indicators.ema;
    document.getElementById('rsi-toggle').checked = indicators.rsi;
    document.getElementById('macd-toggle').checked = indicators.macd;
    document.getElementById('bollinger-toggle').checked = indicators.bollinger;
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
function saveIndicatorsToLocalStorage() {
    localStorage.setItem('tradelearn_indicators', JSON.stringify(indicators));
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é
function showSection(sectionId) {
    hideAllSections();
    const section = document.getElementById(`${sectionId}-section`);
    if (section) {
        section.style.display = 'block';
    }
}

// –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏
function hideAllSections() {
    document.querySelectorAll('.content-section').forEach(section => {
        section.style.display = 'none';
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∞–π–¥–±–∞—Ä–∞
function toggleSidebar() {
    document.querySelector('.sidebar').classList.toggle('collapsed');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function showLoading() {
    document.getElementById('chartLoadingOverlay').style.display = 'flex';
}

// –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function hideLoading() {
    document.getElementById('chartLoadingOverlay').style.display = 'none';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(message) {
    showNotification('–û—à–∏–±–∫–∞', message, 'error');
}

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
function updateCurrentPrice(bar) {
    const priceElement = document.getElementById('current-price');
    const changeElement = document.getElementById('price-change');
    
    const prevPrice = currentData.length > 1 ? currentData[currentData.length - 2].close : bar.open;
    const change = ((bar.close - prevPrice) / prevPrice) * 100;
    
    priceElement.textContent = bar.close.toFixed(2);
    changeElement.textContent = `${change >= 0 ? '+' : ''}${change.toFixed(2)}%`;
    changeElement.className = `price-change ${change >= 0 ? 'positive' : 'negative'}`;
}

// –û–±–Ω–æ–≤–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
function updateMarketStats(data) {
    if (data && data.k) {
        const kline = data.k;
        document.getElementById('volume24h').textContent = formatVolume(parseFloat(kline.v));
        document.getElementById('high24h').textContent = parseFloat(kline.h).toFixed(2);
        document.getElementById('low24h').textContent = parseFloat(kline.l).toFixed(2);
    }
}

function formatVolume(volume) {
    if (volume >= 1000000) {
        return (volume / 1000000).toFixed(2) + 'M';
    } else if (volume >= 1000) {
        return (volume / 1000).toFixed(2) + 'K';
    }
    return volume.toFixed(2);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
function showTooltip(x, y, data) {
    const tooltip = document.getElementById('chart-tooltip');
    if (!tooltip) return;
    
    const change = ((data.close - data.open) / data.open) * 100;
    const changeClass = change >= 0 ? 'profit' : 'loss';
    
    tooltip.innerHTML = `
        <div class="tooltip-header">${new Date(data.time * 1000).toLocaleString()}</div>
        <div class="tooltip-content">
            <span class="tooltip-label">Open:</span>
            <span class="tooltip-value">${data.open.toFixed(2)}</span>
            
            <span class="tooltip-label">High:</span>
            <span class="tooltip-value">${data.high.toFixed(2)}</span>
            
            <span class="tooltip-label">Low:</span>
            <span class="tooltip-value">${data.low.toFixed(2)}</span>
            
            <span class="tooltip-label">Close:</span>
            <span class="tooltip-value">${data.close.toFixed(2)}</span>
            
            <span class="tooltip-label">Change:</span>
            <span class="tooltip-value ${changeClass}">${change >= 0 ? '+' : ''}${change.toFixed(2)}%</span>
        </div>
    `;
    
    const chartContainer = document.querySelector('.chart-container');
    const rect = chartContainer.getBoundingClientRect();
    
    tooltip.style.left = (x + rect.left) + 'px';
    tooltip.style.top = (y + rect.top - 100) + 'px';
    tooltip.style.display = 'block';
}

// –°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
function hideTooltip() {
    const tooltip = document.getElementById('chart-tooltip');
    if (tooltip) {
        tooltip.style.display = 'none';
    }
}

// –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É
function executeTrade(type) {
    const amount = parseFloat(document.getElementById('trade-amount').value);
    const orderType = document.getElementById('order-type-select').value;
    const currentPrice = currentData[currentData.length - 1].close;
    
    if (isNaN(amount) || amount <= 0) {
        showError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
        return;
    }
    
    let executionPrice = currentPrice;
    if (orderType === 'limit') {
        const limitPrice = parseFloat(document.getElementById('limit-price').value);
        if (isNaN(limitPrice) || limitPrice <= 0) {
            showError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –ª–∏–º–∏—Ç–∞');
            return;
        }
        executionPrice = limitPrice;
    }
    
    if (type === 'buy') {
        if (amount > balance) {
            showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
            return;
        }
        
        const assetAmount = amount / executionPrice;
        const assetSymbol = currentAsset.replace('USDT', '');
        portfolio[assetSymbol] = (portfolio[assetSymbol] || 0) + assetAmount;
        balance -= amount;
        
        tradeHistory.push({
            type: 'buy',
            asset: assetSymbol,
            amount: assetAmount,
            price: executionPrice,
            total: amount,
            timestamp: Date.now(),
            orderType: orderType
        });
        
        showNotification('–ü–æ–∫—É–ø–∫–∞', `–ö—É–ø–ª–µ–Ω–æ ${assetAmount.toFixed(6)} ${assetSymbol} –∑–∞ ${amount.toFixed(2)} USDT`, 'success');
        
    } else if (type === 'sell') {
        const assetSymbol = currentAsset.replace('USDT', '');
        const assetAmount = amount / executionPrice;
        
        if (assetAmount > (portfolio[assetSymbol] || 0)) {
            showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–∞');
            return;
        }
        
        portfolio[assetSymbol] = (portfolio[assetSymbol] || 0) - assetAmount;
        balance += amount;
        
        tradeHistory.push({
            type: 'sell',
            asset: assetSymbol,
            amount: assetAmount,
            price: executionPrice,
            total: amount,
            timestamp: Date.now(),
            orderType: orderType
        });
        
        showNotification('–ü—Ä–æ–¥–∞–∂–∞', `–ü—Ä–æ–¥–∞–Ω–æ ${assetAmount.toFixed(6)} ${assetSymbol} –∑–∞ ${amount.toFixed(2)} USDT`, 'success');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏–≤—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    updateEquityCurve();
    
    updateUI();
    saveToLocalStorage();
    checkAchievements();
    showTeacherHint();
}

// –ö—É–ø–∏—Ç—å –Ω–∞ –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
function buyMax() {
    const currentPrice = currentData[currentData.length - 1].close;
    const maxAmount = balance * 0.95; // –û—Å—Ç–∞–≤–ª—è–µ–º 5% –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏
    document.getElementById('trade-amount').value = maxAmount.toFixed(2);
    executeTrade('buy');
}

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
function setTradeAmountByPercent(percent) {
    const maxAmount = balance * (percent / 100);
    document.getElementById('trade-amount').value = maxAmount.toFixed(2);
}

// –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∏—Å–∫
function calculateRisk() {
    const deposit = parseFloat(document.getElementById('risk-deposit').value);
    const riskPercent = parseFloat(document.getElementById('risk-percent').value);
    const entryPrice = parseFloat(document.getElementById('risk-entry').value);
    const stopPrice = parseFloat(document.getElementById('risk-stop').value);
    
    if (isNaN(deposit) || isNaN(riskPercent) || isNaN(entryPrice) || isNaN(stopPrice)) {
        showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }
    
    const riskAmount = deposit * (riskPercent / 100);
    const priceDifference = Math.abs(entryPrice - stopPrice);
    const volume = riskAmount / priceDifference;
    const potentialProfit = volume * (entryPrice * 0.02); // 2% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
    const riskRewardRatio = potentialProfit / riskAmount;
    
    document.getElementById('risk-volume').textContent = volume.toFixed(6);
    document.getElementById('risk-amount').textContent = riskAmount.toFixed(2) + ' USDT';
    document.getElementById('risk-profit').textContent = potentialProfit.toFixed(2) + ' USDT';
    document.getElementById('risk-ratio').textContent = riskRewardRatio.toFixed(2);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ —Å—É–º–º—ã –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ
    document.getElementById('trade-amount').value = (volume * entryPrice).toFixed(2);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É —É—á–∏—Ç–µ–ª—è
function showTeacherHint() {
    const messages = [
        "–ü–æ–º–Ω–∏—Ç–µ –æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞—Ö! –†–∏—Å–∫—É–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞.",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ–¥ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–¥–µ–ª–∫–∏. –ò—â–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!",
        "–ù–µ –ø–æ–¥–¥–∞–≤–∞–π—Ç–µ—Å—å —ç–º–æ—Ü–∏—è–º - —Ç–æ—Ä–≥—É–π—Ç–µ –ø–æ –ø–ª–∞–Ω—É, –∞ –Ω–µ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é.",
        "–î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤. –ù–µ –∫–ª–∞–¥–∏—Ç–µ –≤—Å–µ —è–π—Ü–∞ –≤ –æ–¥–Ω—É –∫–æ—Ä–∑–∏–Ω—É!",
        "–ò–∑—É—á–∞–π—Ç–µ –æ—Å–Ω–æ–≤—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - —ç—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞.",
        "–í–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª! –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —É—Å–ø–µ—Ö–∏ –∏ –æ—à–∏–±–∫–∏.",
        "–¢—Ä–µ–Ω–¥ - –≤–∞—à –¥—Ä—É–≥. –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–æ–≤–∏—á–∫–∞–º.",
        "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è! –ò–∑—É—á–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏.",
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º –≤–∞–∂–Ω–µ–µ, —á–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤!",
        "–û–±—É—á–∞–π—Ç–µ—Å—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ! –†—ã–Ω–∫–∏ –º–µ–Ω—è—é—Ç—Å—è, –∏ –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è."
    ];
    
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    document.getElementById('teacher-message').textContent = randomMessage;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —É—á–∏—Ç–µ–ª—è
function showTeacherAnalysis() {
    const currentPrice = currentData[currentData.length - 1].close;
    const analysis = `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ${currentAsset}: ${currentPrice.toFixed(2)}. `;
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    let recommendation = "–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã.";
    if (currentData.length > 1) {
        const prevPrice = currentData[currentData.length - 2].close;
        const trend = currentPrice > prevPrice ? "–≤–æ—Å—Ö–æ–¥—è—â–∏–π" : "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π";
        recommendation = `–ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è ${trend} —Ç—Ä–µ–Ω–¥. ${recommendation}`;
    }
    
    document.getElementById('teacher-message').textContent = analysis + recommendation;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫ —É—á–∏—Ç–µ–ª—è
function showTeacherLesson() {
    const lessons = document.getElementById('teacher-lessons');
    const dictionary = document.getElementById('teacher-dictionary');
    const termDetails = document.getElementById('term-details');
    
    if (lessons.style.display === 'block') {
        lessons.style.display = 'none';
    } else {
        lessons.style.display = 'block';
        dictionary.style.display = 'none';
        termDetails.style.display = 'none';
        document.getElementById('teacher-message').textContent = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:";
    }
}

// –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å
function answerQuestion() {
    const questionInput = document.getElementById('teacher-question');
    const question = questionInput.value.toLowerCase().trim();
    
    if (!question) return;
    
    let answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ: —Ç—Ä–µ–π–¥–∏–Ω–≥–µ, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö, —Ä–∏—Å–∫–∞—Ö, —Å—Ç–æ–ø-–ª–æ—Å—Å–µ –∏–ª–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–µ.";
    
    // –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    for (const [key, value] of Object.entries(teacherKnowledge.questions)) {
        if (question.includes(key)) {
            answer = value;
            break;
        }
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if (question.includes('–ø—Ä–∏–≤–µ—Ç') || question.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤')) {
        answer = "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —É—á–∏—Ç–µ–ª—å –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É!";
    }
    
    if (question.includes('—Å–ø–∞—Å–∏–±–æ') || question.includes('–±–ª–∞–≥–æ–¥–∞—Ä')) {
        answer = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å. –£–¥–∞—á–∏ –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ! üöÄ";
    }
    
    // –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if (answer === "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å...") {
        answer = teacherKnowledge.getSmartAnswer(question);
    }
    
    document.getElementById('teacher-message').textContent = answer;
    questionInput.value = '';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫
function showLesson(lessonId) {
    const lesson = teacherKnowledge.lessons[lessonId];
    if (lesson) {
        document.getElementById('teacher-message').innerHTML = `
            <strong>${lesson.title}</strong><br><br>
            ${lesson.content.replace(/\n/g, '<br>')}
        `;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
function showTermDefinition(termId) {
    const term = teacherKnowledge.dictionary[termId];
    if (term) {
        document.getElementById('term-title').textContent = term.title;
        document.getElementById('term-description').textContent = term.description;
        document.getElementById('term-details').style.display = 'block';
        document.getElementById('teacher-dictionary').style.display = 'none';
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å
function toggleDictionary() {
    const dictionary = document.getElementById('teacher-dictionary');
    const lessons = document.getElementById('teacher-lessons');
    const termDetails = document.getElementById('term-details');
    
    if (dictionary.style.display === 'block') {
        dictionary.style.display = 'none';
    } else {
        dictionary.style.display = 'block';
        lessons.style.display = 'none';
        termDetails.style.display = 'none';
    }
}

// –°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä
function createOrder() {
    const orderType = document.getElementById('order-type').value;
    const orderPrice = parseFloat(document.getElementById('order-price').value);
    const orderAmount = parseFloat(document.getElementById('order-amount').value);
    
    if (isNaN(orderPrice) || isNaN(orderAmount) || orderPrice <= 0 || orderAmount <= 0) {
        showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        return;
    }
    
    activeOrders.push({
        type: orderType,
        price: orderPrice,
        amount: orderAmount,
        asset: currentAsset.replace('USDT', ''),
        timestamp: Date.now()
    });
    
    updateOrdersList();
    saveToLocalStorage();
    
    document.getElementById('order-price').value = '';
    document.getElementById('order-amount').value = '';
    
    showNotification('–û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω', `${getOrderTypeText(orderType)} –æ—Ä–¥–µ—Ä –Ω–∞ ${orderAmount} –ø–æ —Ü–µ–Ω–µ ${orderPrice}`, 'success');
}

function getOrderTypeText(type) {
    const types = {
        'STOP': '–°—Ç–æ–ø-–ª–æ—Å—Å',
        'TAKE_PROFIT': '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç',
        'STOP_LIMIT': '–°—Ç–æ–ø-–ª–∏–º–∏—Ç'
    };
    return types[type] || type;
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤
function updateOrdersList() {
    const container = document.getElementById('orders-container');
    
    if (activeOrders.length === 0) {
        container.innerHTML = '<div class="empty-orders">–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç</div>';
        return;
    }
    
    container.innerHTML = activeOrders.map((order, index) => `
        <div class="order-item ${order.type.toLowerCase().replace('_', '-')}">
            <div class="order-info">
                <div class="order-type">${getOrderTypeText(order.type)}</div>
                <div class="order-details">
                    ${order.asset} | –¶–µ–Ω–∞: ${order.price.toFixed(2)} | –û–±—ä–µ–º: ${order.amount.toFixed(6)}
                </div>
            </div>
            <div class="order-actions">
                <button class="order-cancel-btn" onclick="cancelOrder(${index})">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `).join('');
}

// –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä
function cancelOrder(index) {
    activeOrders.splice(index, 1);
    updateOrdersList();
    saveToLocalStorage();
    showNotification('–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω', '–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'warning');
}

// –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
function analyzeMarketData(currentCandle) {
    if (currentData.length < 20) return;
    
    const signals = [];
    
    // –ê–Ω–∞–ª–∏–∑ RSI
    if (document.getElementById('rsi-signals').checked) {
        const rsiSignals = analyzeRSI();
        signals.push(...rsiSignals);
    }
    
    // –ê–Ω–∞–ª–∏–∑ MACD
    if (document.getElementById('macd-signals').checked) {
        const macdSignals = analyzeMACD();
        signals.push(...macdSignals);
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
    if (document.getElementById('bollinger-signals').checked) {
        const bollingerSignals = analyzeBollinger();
        signals.push(...bollingerSignals);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    updateSignalsList(signals);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
    updateMarketAnalysis();
}

// –ê–Ω–∞–ª–∏–∑ RSI
function analyzeRSI() {
    const signals = [];
    const rsiData = calculateRSI(currentData, 14);
    
    if (rsiData.length === 0) return signals;
    
    const currentRSI = rsiData[rsiData.length - 1].value;
    document.getElementById('rsi-value').textContent = currentRSI.toFixed(2);
    
    if (currentRSI > 70) {
        signals.push({
            type: 'sell',
            strength: 'high',
            description: `RSI ${currentRSI.toFixed(2)} - –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å`,
            timestamp: Date.now()
        });
    } else if (currentRSI < 30) {
        signals.push({
            type: 'buy',
            strength: 'high',
            description: `RSI ${currentRSI.toFixed(2)} - –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å`,
            timestamp: Date.now()
        });
    } else if (currentRSI > 65) {
        signals.push({
            type: 'warning',
            strength: 'medium',
            description: `RSI ${currentRSI.toFixed(2)} - –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏`,
            timestamp: Date.now()
        });
    } else if (currentRSI < 35) {
        signals.push({
            type: 'warning',
            strength: 'medium',
            description: `RSI ${currentRSI.toFixed(2)} - –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏`,
            timestamp: Date.now()
        });
    }
    
    return signals;
}

// –ê–Ω–∞–ª–∏–∑ MACD
function analyzeMACD() {
    const signals = [];
    const macdData = calculateMACD(currentData);
    
    if (macdData.length < 2) return signals;
    
    const current = macdData[macdData.length - 1];
    const previous = macdData[macdData.length - 2];
    
    document.getElementById('macd-value').textContent = current.macd.toFixed(4);
    
    if (previous.macd < previous.signal && current.macd > current.signal) {
        signals.push({
            type: 'buy',
            strength: 'medium',
            description: 'MACD –ø–µ—Ä–µ—Å–µ–∫ —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –≤–≤–µ—Ä—Ö',
            timestamp: Date.now()
        });
    } else if (previous.macd > previous.signal && current.macd < current.signal) {
        signals.push({
            type: 'sell',
            strength: 'medium',
            description: 'MACD –ø–µ—Ä–µ—Å–µ–∫ —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –≤–Ω–∏–∑',
            timestamp: Date.now()
        });
    }
    
    return signals;
}

// –ê–Ω–∞–ª–∏–∑ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
function analyzeBollinger() {
    const signals = [];
    const bollingerData = calculateBollingerBands(currentData, 20, 2);
    
    if (bollingerData.length === 0) return signals;
    
    const current = bollingerData[bollingerData.length - 1];
    const currentPrice = currentData[currentData.length - 1].close;
    
    if (currentPrice > current.upper) {
        signals.push({
            type: 'sell',
            strength: 'medium',
            description: '–¶–µ–Ω–∞ –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞',
            timestamp: Date.now()
        });
    } else if (currentPrice < current.lower) {
        signals.push({
            type: 'buy',
            strength: 'medium',
            description: '–¶–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞',
            timestamp: Date.now()
        });
    }
    
    return signals;
}

// –†–∞—Å—á–µ—Ç MACD
function calculateMACD(data, fastPeriod = 12, slowPeriod = 26, signalPeriod = 9) {
    const closes = data.map(d => d.close);
    const fastEMA = calculateEMAValues(closes, fastPeriod);
    const slowEMA = calculateEMAValues(closes, slowPeriod);
    
    const macdLine = fastEMA.map((fast, i) => fast - slowEMA[i]);
    const signalLine = calculateEMAValues(macdLine, signalPeriod);
    
    return macdLine.map((macd, i) => ({
        macd: macd,
        signal: signalLine[i],
        histogram: macd - signalLine[i]
    }));
}

// –†–∞—Å—á–µ—Ç EMA –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π
function calculateEMAValues(data, period) {
    const k = 2 / (period + 1);
    const ema = [data[0]];
    
    for (let i = 1; i < data.length; i++) {
        ema.push(data[i] * k + ema[i - 1] * (1 - k));
    }
    
    return ema;
}

// –†–∞—Å—á–µ—Ç –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
function calculateBollingerBands(data, period = 20, stdDevMultiplier = 2) {
    const result = [];
    
    for (let i = period - 1; i < data.length; i++) {
        const slice = data.slice(i - period + 1, i + 1).map(d => d.close);
        const mean = slice.reduce((a, b) => a + b, 0) / period;
        const variance = slice.reduce((acc, price) => acc + Math.pow(price - mean, 2), 0) / period;
        const stdDev = Math.sqrt(variance);
        
        result.push({
            middle: mean,
            upper: mean + (stdDev * stdDevMultiplier),
            lower: mean - (stdDev * stdDevMultiplier)
        });
    }
    
    return result;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
function updateSignalsList(signals) {
    const signalsList = document.getElementById('signals-list');
    const activeFilter = document.querySelector('.signal-filter.active').dataset.type;
    
    tradingSignals = [...signals, ...tradingSignals].slice(0, 50);
    
    if (tradingSignals.length === 0) {
        signalsList.innerHTML = '<div class="empty-signals">–°–∏–≥–Ω–∞–ª—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</div>';
        return;
    }
    
    const filteredSignals = activeFilter === 'all' 
        ? tradingSignals 
        : tradingSignals.filter(s => s.type === activeFilter);
    
    signalsList.innerHTML = filteredSignals.map(signal => `
        <div class="signal-item ${signal.type}">
            <div class="signal-info">
                <div class="signal-type">${getSignalTypeText(signal.type)}</div>
                <div class="signal-desc">${signal.description}</div>
                <div class="signal-time">${new Date(signal.timestamp).toLocaleTimeString()}</div>
            </div>
            <div class="signal-strength ${signal.strength}">
                ${getStrengthText(signal.strength)}
            </div>
        </div>
    `).join('');
}

function getSignalTypeText(type) {
    const typeMap = {
        'buy': 'üü¢ –ü–æ–∫—É–ø–∫–∞',
        'sell': 'üî¥ –ü—Ä–æ–¥–∞–∂–∞',
        'warning': 'üü° –í–Ω–∏–º–∞–Ω–∏–µ'
    };
    return typeMap[type] || type;
}

function getStrengthText(strength) {
    const strengthMap = {
        'high': '–í—ã—Å–æ–∫–∞—è',
        'medium': '–°—Ä–µ–¥–Ω—è—è',
        'low': '–ù–∏–∑–∫–∞—è'
    };
    return strengthMap[strength] || strength;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
function updateMarketAnalysis() {
    if (currentData.length < 20) return;
    
    updateTrendAnalysis();
    updateVolatilityAnalysis();
    updateSupportResistance();
    updateSentimentAnalysis();
}

function updateTrendAnalysis() {
    const prices = currentData.map(d => d.close);
    
    if (prices.length < 50) return;
    
    const shortMA = calculateSMA(currentData, 10);
    const longMA = calculateSMA(currentData, 50);
    
    if (shortMA.length === 0 || longMA.length === 0) return;
    
    const currentShort = shortMA[shortMA.length - 1].value;
    const currentLong = longMA[longMA.length - 1].value;
    
    let trend = '–ë–æ–∫–æ–≤–æ–π';
    let strength = '–°–ª–∞–±—ã–π';
    
    if (currentShort > currentLong) {
        trend = '–í–æ—Å—Ö–æ–¥—è—â–∏–π';
        strength = currentShort - currentLong > currentLong * 0.02 ? '–°–∏–ª—å–Ω—ã–π' : '–°—Ä–µ–¥–Ω–∏–π';
    } else if (currentShort < currentLong) {
        trend = '–ù–∏—Å—Ö–æ–¥—è—â–∏–π';
        strength = currentLong - currentShort > currentLong * 0.02 ? '–°–∏–ª—å–Ω—ã–π' : '–°—Ä–µ–¥–Ω–∏–π';
    }
    
    document.getElementById('current-trend').textContent = trend;
    document.getElementById('trend-strength').textContent = strength;
    
    // –ü—Ä–æ—Å—Ç–æ–π ADX —Ä–∞—Å—á–µ—Ç
    const adx = calculateSimpleADX();
    document.getElementById('adx-value').textContent = adx.toFixed(2);
}

function calculateSimpleADX() {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç ADX
    if (currentData.length < 14) return 25;
    
    let sumPositive = 0;
    let sumNegative = 0;
    
    for (let i = 1; i < 14; i++) {
        const change = currentData[currentData.length - i].close - currentData[currentData.length - i - 1].close;
        if (change > 0) sumPositive += change;
        else sumNegative += Math.abs(change);
    }
    
    const dx = Math.abs(sumPositive - sumNegative) / (sumPositive + sumNegative) * 100;
    return Math.min(dx * 1.5, 60); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
}

function updateVolatilityAnalysis() {
    const atr = calculateATR(currentData, 14);
    const volatility = (atr / currentData[currentData.length - 1].close) * 100;
    
    document.getElementById('atr-value').textContent = atr.toFixed(4);
    document.getElementById('daily-volatility').textContent = volatility.toFixed(2) + '%';
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    const recentPrices = currentData.slice(-20).map(d => d.close);
    const mean = recentPrices.reduce((a, b) => a + b, 0) / recentPrices.length;
    const stdDev = Math.sqrt(recentPrices.reduce((sq, n) => sq + Math.pow(n - mean, 2), 0) / recentPrices.length);
    document.getElementById('std-dev').textContent = stdDev.toFixed(4);
    
    // –ë–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    document.getElementById('beta-value').textContent = (volatility / 10).toFixed(2);
}

function calculateATR(data, period = 14) {
    if (data.length < period + 1) return 0;
    
    let sumTR = 0;
    
    for (let i = 1; i <= period; i++) {
        const high = data[data.length - i].high;
        const low = data[data.length - i].low;
        const prevClose = data[data.length - i - 1].close;
        
        const tr = Math.max(
            high - low,
            Math.abs(high - prevClose),
            Math.abs(low - prevClose)
        );
        sumTR += tr;
    }
    
    return sumTR / period;
}

function updateSupportResistance() {
    const recentData = currentData.slice(-50);
    const highs = recentData.map(d => d.high);
    const lows = recentData.map(d => d.low);
    
    const resistance = Math.max(...highs);
    const support = Math.min(...lows);
    const currentClose = recentData[recentData.length - 1].close;
    const pivot = (resistance + support + currentClose) / 3;
    
    const r1 = 2 * pivot - support;
    const s1 = 2 * pivot - resistance;
    
    document.getElementById('resistance-level').textContent = resistance.toFixed(2);
    document.getElementById('support-level').textContent = support.toFixed(2);
    document.getElementById('pivot-level').textContent = pivot.toFixed(2);
    document.getElementById('r1-level').textContent = r1.toFixed(2);
    document.getElementById('s1-level').textContent = s1.toFixed(2);
}

function updateSentimentAnalysis() {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π
    const recentChanges = [];
    for (let i = 1; i <= 5; i++) {
        if (currentData.length > i) {
            const change = ((currentData[currentData.length - i].close - currentData[currentData.length - i - 1].close) / 
                           currentData[currentData.length - i - 1].close) * 100;
            recentChanges.push(change);
        }
    }
    
    const positiveChanges = recentChanges.filter(change => change > 0).length;
    const sentiment = positiveChanges >= 3 ? '–ë—ã—á–∏–π' : positiveChanges <= 1 ? '–ú–µ–¥–≤–µ–∂–∏–π' : '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π';
    
    document.getElementById('overall-sentiment').textContent = sentiment;
    document.getElementById('buyer-strength').textContent = positiveChanges + '/5';
    document.getElementById('seller-strength').textContent = (5 - positiveChanges) + '/5';
    
    let recommendation = '–ù–∞–±–ª—é–¥–∞–π—Ç–µ';
    if (sentiment === '–ë—ã—á–∏–π') recommendation = '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É';
    else if (sentiment === '–ú–µ–¥–≤–µ–∂–∏–π') recommendation = '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–∂—É';
    
    document.getElementById('sentiment-recommendation').textContent = recommendation;
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(title, message, type = 'info') {
    const container = document.getElementById('notification-container');
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <div class="notification-header">
            <div class="notification-title">${title}</div>
            <button class="notification-close">‚úï</button>
        </div>
        <div class="notification-message">${message}</div>
    `;
    
    container.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 5000);
    
    notification.querySelector('.notification-close').addEventListener('click', () => {
        notification.remove();
    });
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–º
function autoScaleChart() {
    chart.timeScale().fitContent();
    showNotification('–ú–∞—Å—à—Ç–∞–±', '–ì—Ä–∞—Ñ–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω', 'info');
}

function resetChart() {
    chart.timeScale().resetTimeScale();
    showNotification('–°–±—Ä–æ—Å', '–ú–∞—Å—à—Ç–∞–± –≥—Ä–∞—Ñ–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω', 'info');
}

// –°–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞
function switchAsset(newAsset) {
    currentAsset = newAsset;
    
    if (wsConnection) {
        wsConnection.close();
    }
    
    document.getElementById('current-asset').textContent = newAsset.replace('USDT', '/USDT');
    loadChartData();
    initializeWebSocket();
}

// –°–º–µ–Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
function switchTimeframe(newTimeframe) {
    currentTimeframe = newTimeframe;
    
    if (wsConnection) {
        wsConnection.close();
    }
    
    loadChartData();
    initializeWebSocket();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    // –ë–∞–ª–∞–Ω—Å
    document.getElementById('balance').textContent = balance.toFixed(2) + ' USDT';
    
    // –ü–æ—Ä—Ç—Ñ–µ–ª—å
    document.getElementById('btc-amount').textContent = portfolio.BTC.toFixed(6);
    document.getElementById('eth-amount').textContent = portfolio.ETH.toFixed(6);
    document.getElementById('sol-amount').textContent = portfolio.SOL.toFixed(6);
    document.getElementById('ada-amount').textContent = portfolio.ADA.toFixed(6);
    document.getElementById('dot-amount').textContent = portfolio.DOT.toFixed(6);
    document.getElementById('bnb-amount').textContent = portfolio.BNB.toFixed(6);
    
    // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const currentPrice = currentData.length > 0 ? currentData[currentData.length - 1].close : 0;
    const totalValue = calculateTotalPortfolioValue(currentPrice);
    document.getElementById('total-value').textContent = totalValue.toFixed(2) + ' USDT';
    
    // –ò—Å—Ç–æ—Ä–∏—è
    updateHistoryList();
    
    // –û—Ä–¥–µ—Ä–∞
    updateOrdersList();
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    updateStatistics();
    
    // –î–∞–Ω–Ω—ã–µ
    updateDataInfo();
}

function calculateTotalPortfolioValue(currentPrice) {
    let total = balance;
    const priceMultipliers = {
        'BTC': 1,
        'ETH': 0.06, // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω
        'SOL': 0.002,
        'ADA': 0.00001,
        'DOT': 0.0001,
        'BNB': 0.012,
        'XRP': 0.00002,
        'DOGE': 0.000001
    };
    
    for (const [asset, amount] of Object.entries(portfolio)) {
        if (amount > 0 && priceMultipliers[asset]) {
            total += amount * currentPrice * priceMultipliers[asset];
        }
    }
    
    return total;
}

// –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
function updateHistoryList() {
    const container = document.getElementById('history-items');
    const activeFilter = document.querySelector('.history-filter.active').dataset.filter;
    
    if (tradeHistory.length === 0) {
        container.innerHTML = '<div class="empty-history">–°–¥–µ–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
        return;
    }
    
    let filteredHistory = tradeHistory;
    
    if (activeFilter === 'buy') {
        filteredHistory = tradeHistory.filter(t => t.type === 'buy');
    } else if (activeFilter === 'sell') {
        filteredHistory = tradeHistory.filter(t => t.type === 'sell');
    } else if (activeFilter === 'profit') {
        filteredHistory = tradeHistory.filter(t => {
            if (t.type === 'buy') return false;
            // –î–ª—è –ø—Ä–æ–¥–∞–∂ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
            const buyTrades = tradeHistory.filter(bt => 
                bt.type === 'buy' && bt.asset === t.asset && bt.timestamp < t.timestamp
            );
            if (buyTrades.length === 0) return false;
            const avgBuyPrice = buyTrades.reduce((sum, bt) => sum + bt.price, 0) / buyTrades.length;
            return t.price > avgBuyPrice;
        });
    } else if (activeFilter === 'loss') {
        filteredHistory = tradeHistory.filter(t => {
            if (t.type === 'buy') return false;
            const buyTrades = tradeHistory.filter(bt => 
                bt.type === 'buy' && bt.asset === t.asset && bt.timestamp < t.timestamp
            );
            if (buyTrades.length === 0) return false;
            const avgBuyPrice = buyTrades.reduce((sum, bt) => sum + bt.price, 0) / buyTrades.length;
            return t.price <= avgBuyPrice;
        });
    }
    
    container.innerHTML = filteredHistory.slice().reverse().map(trade => {
        const isProfit = trade.type === 'sell' && isTradeProfitable(trade);
        return `
            <div class="history-item ${trade.type === 'buy' ? '' : (isProfit ? '' : 'loss')}">
                <div class="history-info">
                    <div class="history-type">${trade.type === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞'} ${trade.asset}</div>
                    <div class="history-details">
                        ${new Date(trade.timestamp).toLocaleString()} | 
                        –¶–µ–Ω–∞: ${trade.price.toFixed(2)} | 
                        –û–±—ä–µ–º: ${trade.amount.toFixed(6)}
                        ${trade.orderType === 'limit' ? ' (–õ–∏–º–∏—Ç)' : ''}
                    </div>
                </div>
                <div class="history-amount ${trade.type === 'buy' ? 'loss' : (isProfit ? 'profit' : 'loss')}">
                    ${trade.type === 'buy' ? '-' : (isProfit ? '+' : '-')}${trade.total.toFixed(2)} USDT
                </div>
            </div>
        `;
    }).join('');
}

function isTradeProfitable(sellTrade) {
    const buyTrades = tradeHistory.filter(t => 
        t.type === 'buy' && t.asset === sellTrade.asset && t.timestamp < sellTrade.timestamp
    );
    if (buyTrades.length === 0) return false;
    
    const totalBuyAmount = buyTrades.reduce((sum, t) => sum + t.amount, 0);
    const totalBuyCost = buyTrades.reduce((sum, t) => sum + (t.amount * t.price), 0);
    const avgBuyPrice = totalBuyCost / totalBuyAmount;
    
    return sellTrade.price > avgBuyPrice;
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
function updateStatistics() {
    const totalTrades = tradeHistory.length;
    const buyTrades = tradeHistory.filter(t => t.type === 'buy').length;
    const sellTrades = tradeHistory.filter(t => t.type === 'sell').length;
    
    const winningTrades = tradeHistory.filter(t => 
        t.type === 'sell' && isTradeProfitable(t)
    ).length;
    
    const winRate = totalTrades > 0 ? (winningTrades / sellTrades * 100) : 0;
    
    const totalProfit = calculateTotalProfit();
    const avgTradeReturn = totalTrades > 0 ? (totalProfit / totalTrades) : 0;
    
    document.getElementById('total-trades').querySelector('.stat-value').textContent = totalTrades;
    document.getElementById('win-rate').querySelector('.stat-value').textContent = winRate.toFixed(1) + '%';
    document.getElementById('total-profit').querySelector('.stat-value').textContent = totalProfit.toFixed(2) + ' USDT';
    document.getElementById('avg-trade').querySelector('.stat-value').textContent = avgTradeReturn.toFixed(2) + '%';
}

function calculateTotalProfit() {
    let profit = 0;
    const assetBalances = {};
    
    tradeHistory.forEach(trade => {
        if (trade.type === 'buy') {
            if (!assetBalances[trade.asset]) {
                assetBalances[trade.asset] = { amount: 0, cost: 0 };
            }
            assetBalances[trade.asset].amount += trade.amount;
            assetBalances[trade.asset].cost += trade.total;
        } else if (trade.type === 'sell') {
            if (assetBalances[trade.asset]) {
                const avgCost = assetBalances[trade.asset].cost / assetBalances[trade.asset].amount;
                const tradeProfit = (trade.price - avgCost) * trade.amount;
                profit += tradeProfit;
                
                assetBalances[trade.asset].amount -= trade.amount;
                assetBalances[trade.asset].cost -= avgCost * trade.amount;
            }
        }
    });
    
    return profit;
}

// –û–±–Ω–æ–≤–∏—Ç—å –∫—Ä–∏–≤—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
function updateEquityCurve() {
    const currentEquity = calculateTotalPortfolioValue(currentData[currentData.length - 1].close);
    equityCurve.push(currentEquity);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞
    if (equityCurve.length > 100) {
        equityCurve.shift();
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements() {
    const achievements = document.querySelectorAll('.achievement-card');
    
    achievements.forEach(achievement => {
        const title = achievement.querySelector('.achievement-title').textContent;
        
        if (title === '–ü–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞' && tradeHistory.length > 0) {
            achievement.classList.remove('locked');
            achievement.classList.add('unlocked');
        }
        
        if (title === '–ü—Ä–æ—Ñ–∏—Ç +10%') {
            const totalValue = calculateTotalPortfolioValue(currentData[currentData.length - 1].close);
            if (totalValue >= 110) {
                achievement.classList.remove('locked');
                achievement.classList.add('unlocked');
            }
        }
        
        if (title === '5 —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫') {
            const successfulTrades = tradeHistory.filter(t => 
                t.type === 'sell' && isTradeProfitable(t)
            ).length;
            if (successfulTrades >= 5) {
                achievement.classList.remove('locked');
                achievement.classList.add('unlocked');
            }
        }
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function exportData() {
    const data = {
        balance,
        portfolio,
        tradeHistory,
        activeOrders,
        indicators,
        equityCurve,
        version: '1.0',
        exportDate: new Date().toISOString()
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = `tradelearn-data-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    
    URL.revokeObjectURL(url);
    showNotification('–≠–∫—Å–ø–æ—Ä—Ç', '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
}

// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function importData(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const data = JSON.parse(e.target.result);
            
            if (data.version) {
                balance = data.balance || balance;
                portfolio = data.portfolio || portfolio;
                tradeHistory = data.tradeHistory || tradeHistory;
                activeOrders = data.activeOrders || activeOrders;
                indicators = data.indicators || indicators;
                equityCurve = data.equityCurve || equityCurve;
                
                updateUI();
                updateIndicatorCheckboxes();
                updateIndicatorsVisibility();
                saveToLocalStorage();
                saveIndicatorsToLocalStorage();
                
                showNotification('–ò–º–ø–æ—Ä—Ç', '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
            } else {
                showError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
            }
            
        } catch (error) {
            showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö');
        }
    };
    
    reader.readAsText(file);
    event.target.value = '';
}

// –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
function createBackup() {
    exportData();
}

// –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
function resetData() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã. –ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –¥–æ 100 USDT.')) {
        balance = 100.00;
        portfolio = {
            'BTC': 0, 'ETH': 0, 'SOL': 0, 'ADA': 0, 
            'DOT': 0, 'BNB': 0, 'XRP': 0, 'DOGE': 0
        };
        tradeHistory = [];
        activeOrders = [];
        equityCurve = [100];
        
        updateUI();
        saveToLocalStorage();
        showNotification('–°–±—Ä–æ—Å', '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã', 'success');
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
function updateDataInfo() {
    const data = {
        balance,
        portfolio,
        tradeHistory,
        activeOrders
    };
    
    const dataSize = new Blob([JSON.stringify(data)]).size;
    document.getElementById('data-size').textContent = (dataSize / 1024).toFixed(2) + ' KB';
    document.getElementById('last-update').textContent = new Date().toLocaleString();
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage
function saveToLocalStorage() {
    const data = {
        balance,
        portfolio,
        tradeHistory,
        activeOrders,
        equityCurve
    };
    
    localStorage.setItem('tradelearn_data', JSON.stringify(data));
    updateDataInfo();
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
function loadFromLocalStorage() {
    const saved = localStorage.getItem('tradelearn_data');
    if (saved) {
        try {
            const data = JSON.parse(saved);
            balance = data.balance || balance;
            portfolio = data.portfolio || portfolio;
            tradeHistory = data.tradeHistory || tradeHistory;
            activeOrders = data.activeOrders || activeOrders;
            equityCurve = data.equityCurve || equityCurve;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.cancelOrder = cancelOrder;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
initializeApp();
